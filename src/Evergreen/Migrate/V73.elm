module Evergreen.Migrate.V73 exposing (..)

{-| This migration file was automatically generated by the lamdera compiler.

It includes:

  - A migration for each of the 6 Lamdera core types that has changed
  - A function named `migrate_ModuleName_TypeName` for each changed/custom type

Expect to see:

  - `Unimplement–µd` values as placeholders wherever I was unable to figure out a clear migration path for you
  - `@NOTICE` comments for things you should know about, i.e. new custom type constructors that won't get any
    value mappings from the old type by default

You can edit this file however you wish! It won't be generated again.

See <https://dashboard.lamdera.app/docs/evergreen> for more info.

-}

import Array
import AssocList
import AssocSet
import BiDict.Assoc
import BiDict.Assoc2
import Evergreen.V71.Address
import Evergreen.V71.AdminStatus
import Evergreen.V71.Cache
import Evergreen.V71.CreateGroupPage
import Evergreen.V71.Description
import Evergreen.V71.EmailAddress
import Evergreen.V71.Event
import Evergreen.V71.EventDuration
import Evergreen.V71.EventName
import Evergreen.V71.FrontendUser
import Evergreen.V71.Group
import Evergreen.V71.GroupName
import Evergreen.V71.GroupPage
import Evergreen.V71.Id
import Evergreen.V71.Link
import Evergreen.V71.MaxAttendees
import Evergreen.V71.Name
import Evergreen.V71.ProfileImage
import Evergreen.V71.ProfilePage
import Evergreen.V71.Route
import Evergreen.V71.TimeZone
import Evergreen.V71.Types
import Evergreen.V71.Untrusted
import Evergreen.V73.Address
import Evergreen.V73.AdminStatus
import Evergreen.V73.BiDict.Assoc2
import Evergreen.V73.Cache
import Evergreen.V73.CreateGroupPage
import Evergreen.V73.Description
import Evergreen.V73.EmailAddress
import Evergreen.V73.Event
import Evergreen.V73.EventDuration
import Evergreen.V73.EventName
import Evergreen.V73.FrontendUser
import Evergreen.V73.Group
import Evergreen.V73.GroupName
import Evergreen.V73.GroupPage
import Evergreen.V73.Id
import Evergreen.V73.Link
import Evergreen.V73.MaxAttendees
import Evergreen.V73.Name
import Evergreen.V73.ProfileImage
import Evergreen.V73.ProfilePage
import Evergreen.V73.Route
import Evergreen.V73.TimeZone
import Evergreen.V73.Types
import Evergreen.V73.Untrusted
import Lamdera.Migrations exposing (..)
import List
import List.Nonempty
import Maybe
import SeqDict
import SeqSet


frontendModel : Evergreen.V71.Types.FrontendModel -> ModelMigration Evergreen.V73.Types.FrontendModel Evergreen.V73.Types.FrontendMsg
frontendModel old =
    ModelMigrated ( migrate_Types_FrontendModel old, Cmd.none )


backendModel : Evergreen.V71.Types.BackendModel -> ModelMigration Evergreen.V73.Types.BackendModel Evergreen.V73.Types.BackendMsg
backendModel old =
    ModelMigrated ( migrate_Types_BackendModel old, Cmd.none )


frontendMsg : Evergreen.V71.Types.FrontendMsg -> MsgMigration Evergreen.V73.Types.FrontendMsg Evergreen.V73.Types.FrontendMsg
frontendMsg old =
    MsgMigrated ( migrate_Types_FrontendMsg old, Cmd.none )


toBackend : Evergreen.V71.Types.ToBackend -> MsgMigration Evergreen.V73.Types.ToBackend Evergreen.V73.Types.BackendMsg
toBackend old =
    MsgUnchanged


backendMsg : Evergreen.V71.Types.BackendMsg -> MsgMigration Evergreen.V73.Types.BackendMsg Evergreen.V73.Types.BackendMsg
backendMsg old =
    MsgUnchanged


toFrontend : Evergreen.V71.Types.ToFrontend -> MsgMigration Evergreen.V73.Types.ToFrontend Evergreen.V73.Types.FrontendMsg
toFrontend old =
    MsgMigrated ( migrate_Types_ToFrontend old, Cmd.none )


assocListToSeqDict migrateKey migrateValue old =
    AssocList.toList old
        |> List.map (Tuple.mapBoth migrateKey migrateValue)
        |> SeqDict.fromList


assocSetToSeqSet migrateKey old =
    AssocSet.toList old
        |> List.map migrateKey
        |> SeqSet.fromList


migrate_Types_BackendModel : Evergreen.V71.Types.BackendModel -> Evergreen.V73.Types.BackendModel
migrate_Types_BackendModel old =
    { users = assocListToSeqDict migrate_Id_Id migrate_Types_BackendUser old.users
    , groups = assocListToSeqDict migrate_Id_Id migrate_Group_Group old.groups
    , deletedGroups = assocListToSeqDict migrate_Id_Id migrate_Group_Group old.deletedGroups
    , sessions = old.sessions |> migrate_BiDict_Assoc_BiDict identity migrate_Id_Id
    , loginAttempts = assocListToSeqDict identity identity old.loginAttempts
    , connections = assocListToSeqDict identity identity old.connections
    , logs = old.logs |> Array.map migrate_Types_Log
    , time = old.time
    , secretCounter = old.secretCounter
    , pendingLoginTokens = assocListToSeqDict migrate_Id_Id migrate_Types_LoginTokenData old.pendingLoginTokens
    , pendingDeleteUserTokens = assocListToSeqDict migrate_Id_Id migrate_DeleteUserTokenData old.pendingDeleteUserTokens
    }


migrate_Types_LoginTokenData : Evergreen.V71.Types.LoginTokenData -> Evergreen.V73.Types.LoginTokenData
migrate_Types_LoginTokenData old =
    { creationTime = old.creationTime
    , emailAddress = old.emailAddress |> migrate_EmailAddress_EmailAddress
    }


migrate_DeleteUserTokenData : Evergreen.V71.Types.DeleteUserTokenData -> Evergreen.V73.Types.DeleteUserTokenData
migrate_DeleteUserTokenData old =
    { creationTime = old.creationTime
    , userId = old.userId |> migrate_Id_Id
    }


migrate_Address_Address : Evergreen.V71.Address.Address -> Evergreen.V73.Address.Address
migrate_Address_Address old =
    case old of
        Evergreen.V71.Address.Address p0 ->
            Evergreen.V73.Address.Address p0


migrate_AdminStatus_AdminStatus : Evergreen.V71.AdminStatus.AdminStatus -> Evergreen.V73.AdminStatus.AdminStatus
migrate_AdminStatus_AdminStatus old =
    case old of
        Evergreen.V71.AdminStatus.IsNotAdmin ->
            Evergreen.V73.AdminStatus.IsNotAdmin

        Evergreen.V71.AdminStatus.IsAdminButDisabled ->
            Evergreen.V73.AdminStatus.IsAdminButDisabled

        Evergreen.V71.AdminStatus.IsAdminAndEnabled ->
            Evergreen.V73.AdminStatus.IsAdminAndEnabled


migrate_BiDict_Assoc_BiDict : (a_old -> a_new) -> (b_old -> b_new) -> BiDict.Assoc.BiDict a_old b_old -> Evergreen.V73.BiDict.Assoc2.BiDict a_new b_new
migrate_BiDict_Assoc_BiDict migrate_a migrate_b old =
    assocListToSeqDict migrate_a migrate_b (BiDict.Assoc.toDict old)
        |> (\forward ->
                Evergreen.V73.BiDict.Assoc2.BiDict
                    { forward = forward
                    , reverse =
                        forward
                            |> SeqDict.foldl
                                (\key value acc ->
                                    SeqDict.update value
                                        (\maybeKeys ->
                                            Just <|
                                                case maybeKeys of
                                                    Nothing ->
                                                        SeqSet.singleton key

                                                    Just keys_ ->
                                                        SeqSet.insert key keys_
                                        )
                                        acc
                                )
                                SeqDict.empty
                    }
           )



--case old of
--    BiDict.Assoc.BiDict p0 ->
--        Evergreen.V73.BiDict.Assoc.BiDict
--            { forward = p0.forward |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_a migrate_b) |> SeqDict.fromList
--            , reverse = p0.reverse |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_b (SeqSet.map migrate_a)) |> SeqDict.fromList
--            }


migrate_CreateGroupPage_CreateGroupError : Evergreen.V71.CreateGroupPage.CreateGroupError -> Evergreen.V73.CreateGroupPage.CreateGroupError
migrate_CreateGroupPage_CreateGroupError old =
    case old of
        Evergreen.V71.CreateGroupPage.GroupNameAlreadyInUse ->
            Evergreen.V73.CreateGroupPage.GroupNameAlreadyInUse


migrate_CreateGroupPage_Form : Evergreen.V71.CreateGroupPage.Form -> Evergreen.V73.CreateGroupPage.Form
migrate_CreateGroupPage_Form old =
    { pressedSubmit = old.pressedSubmit
    , name = old.name
    , description = old.description
    , visibility = old.visibility |> Maybe.map migrate_Group_GroupVisibility
    }


migrate_CreateGroupPage_GroupFormValidated : Evergreen.V71.CreateGroupPage.GroupFormValidated -> Evergreen.V73.CreateGroupPage.GroupFormValidated
migrate_CreateGroupPage_GroupFormValidated old =
    { name = old.name |> migrate_GroupName_GroupName
    , description = old.description |> migrate_Description_Description
    , visibility = old.visibility |> migrate_Group_GroupVisibility
    }


migrate_CreateGroupPage_Model : Evergreen.V71.CreateGroupPage.Model -> Evergreen.V73.CreateGroupPage.Model
migrate_CreateGroupPage_Model old =
    case old of
        Evergreen.V71.CreateGroupPage.Editting p0 ->
            Evergreen.V73.CreateGroupPage.Editting (p0 |> migrate_CreateGroupPage_Form)

        Evergreen.V71.CreateGroupPage.Submitting p0 ->
            Evergreen.V73.CreateGroupPage.Submitting (p0 |> migrate_CreateGroupPage_GroupFormValidated)

        Evergreen.V71.CreateGroupPage.SubmitFailed p0 p1 ->
            Evergreen.V73.CreateGroupPage.SubmitFailed (p0 |> migrate_CreateGroupPage_CreateGroupError)
                (p1 |> migrate_CreateGroupPage_Form)


migrate_CreateGroupPage_Msg : Evergreen.V71.CreateGroupPage.Msg -> Evergreen.V73.CreateGroupPage.Msg
migrate_CreateGroupPage_Msg old =
    case old of
        Evergreen.V71.CreateGroupPage.FormChanged p0 ->
            Evergreen.V73.CreateGroupPage.FormChanged (p0 |> migrate_CreateGroupPage_Form)

        Evergreen.V71.CreateGroupPage.PressedSubmit ->
            Evergreen.V73.CreateGroupPage.PressedSubmit


migrate_Description_Description : Evergreen.V71.Description.Description -> Evergreen.V73.Description.Description
migrate_Description_Description old =
    case old of
        Evergreen.V71.Description.Description p0 ->
            Evergreen.V73.Description.Description p0


migrate_EmailAddress_EmailAddress : Evergreen.V71.EmailAddress.EmailAddress -> Evergreen.V73.EmailAddress.EmailAddress
migrate_EmailAddress_EmailAddress old =
    case old of
        Evergreen.V71.EmailAddress.EmailAddress p0 ->
            Evergreen.V73.EmailAddress.EmailAddress p0


migrate_EventDuration_EventDuration : Evergreen.V71.EventDuration.EventDuration -> Evergreen.V73.EventDuration.EventDuration
migrate_EventDuration_EventDuration old =
    case old of
        Evergreen.V71.EventDuration.EventDuration p0 ->
            Evergreen.V73.EventDuration.EventDuration p0


migrate_EventName_EventName : Evergreen.V71.EventName.EventName -> Evergreen.V73.EventName.EventName
migrate_EventName_EventName old =
    case old of
        Evergreen.V71.EventName.EventName p0 ->
            Evergreen.V73.EventName.EventName p0


migrate_Event_CancellationStatus : Evergreen.V71.Event.CancellationStatus -> Evergreen.V73.Event.CancellationStatus
migrate_Event_CancellationStatus old =
    case old of
        Evergreen.V71.Event.EventCancelled ->
            Evergreen.V73.Event.EventCancelled

        Evergreen.V71.Event.EventUncancelled ->
            Evergreen.V73.Event.EventUncancelled


migrate_Event_Event : Evergreen.V71.Event.Event -> Evergreen.V73.Event.Event
migrate_Event_Event old =
    case old of
        Evergreen.V71.Event.Event p0 ->
            Evergreen.V73.Event.Event
                { name = p0.name |> migrate_EventName_EventName
                , description = p0.description |> migrate_Description_Description
                , eventType = p0.eventType |> migrate_Event_EventType
                , attendees = assocSetToSeqSet migrate_Id_Id p0.attendees
                , startTime = p0.startTime
                , duration = p0.duration |> migrate_EventDuration_EventDuration
                , cancellationStatus = p0.cancellationStatus |> Maybe.map (Tuple.mapFirst migrate_Event_CancellationStatus)
                , createdAt = p0.createdAt
                , maxAttendees = p0.maxAttendees |> migrate_MaxAttendees_MaxAttendees
                }


migrate_Event_EventType : Evergreen.V71.Event.EventType -> Evergreen.V73.Event.EventType
migrate_Event_EventType old =
    case old of
        Evergreen.V71.Event.MeetOnline p0 ->
            Evergreen.V73.Event.MeetOnline (p0 |> Maybe.map migrate_Link_Link)

        Evergreen.V71.Event.MeetInPerson p0 ->
            Evergreen.V73.Event.MeetInPerson (p0 |> Maybe.map migrate_Address_Address)

        Evergreen.V71.Event.MeetOnlineAndInPerson p0 p1 ->
            Evergreen.V73.Event.MeetOnlineAndInPerson (p0 |> Maybe.map migrate_Link_Link)
                (p1 |> Maybe.map migrate_Address_Address)


migrate_GroupName_GroupName : Evergreen.V71.GroupName.GroupName -> Evergreen.V73.GroupName.GroupName
migrate_GroupName_GroupName old =
    case old of
        Evergreen.V71.GroupName.GroupName p0 ->
            Evergreen.V73.GroupName.GroupName p0


migrate_GroupPage_CreateEventError : Evergreen.V71.GroupPage.CreateEventError -> Evergreen.V73.GroupPage.CreateEventError
migrate_GroupPage_CreateEventError old =
    case old of
        Evergreen.V71.GroupPage.EventStartsInThePast ->
            Evergreen.V73.GroupPage.EventStartsInThePast

        Evergreen.V71.GroupPage.EventOverlapsOtherEvents p0 ->
            Evergreen.V73.GroupPage.EventOverlapsOtherEvents (assocSetToSeqSet migrate_Group_EventId p0)

        Evergreen.V71.GroupPage.TooManyEvents ->
            Evergreen.V73.GroupPage.TooManyEvents


migrate_GroupPage_EditEvent : Evergreen.V71.GroupPage.EditEvent -> Evergreen.V73.GroupPage.EditEvent
migrate_GroupPage_EditEvent old =
    { submitStatus = old.submitStatus |> migrate_GroupPage_SubmitStatus migrate_Group_EditEventError
    , eventName = old.eventName
    , description = old.description
    , meetingType = old.meetingType |> migrate_GroupPage_EventType
    , meetOnlineLink = old.meetOnlineLink
    , meetInPersonAddress = old.meetInPersonAddress
    , startDate = old.startDate
    , startTime = old.startTime
    , duration = old.duration
    , maxAttendees = old.maxAttendees
    }


migrate_GroupPage_EventType : Evergreen.V71.GroupPage.EventType -> Evergreen.V73.GroupPage.EventType
migrate_GroupPage_EventType old =
    case old of
        Evergreen.V71.GroupPage.MeetOnline ->
            Evergreen.V73.GroupPage.MeetOnline

        Evergreen.V71.GroupPage.MeetInPerson ->
            Evergreen.V73.GroupPage.MeetInPerson

        Evergreen.V71.GroupPage.MeetOnlineAndInPerson ->
            Evergreen.V73.GroupPage.MeetOnlineAndInPerson


migrate_GroupPage_Msg : Evergreen.V71.GroupPage.Msg -> Evergreen.V73.GroupPage.Msg
migrate_GroupPage_Msg old =
    case old of
        Evergreen.V71.GroupPage.PressedEditDescription ->
            Evergreen.V73.GroupPage.PressedEditDescription

        Evergreen.V71.GroupPage.PressedSaveDescription ->
            Evergreen.V73.GroupPage.PressedSaveDescription

        Evergreen.V71.GroupPage.PressedResetDescription ->
            Evergreen.V73.GroupPage.PressedResetDescription

        Evergreen.V71.GroupPage.TypedDescription p0 ->
            Evergreen.V73.GroupPage.TypedDescription p0

        Evergreen.V71.GroupPage.PressedEditName ->
            Evergreen.V73.GroupPage.PressedEditName

        Evergreen.V71.GroupPage.PressedSaveName ->
            Evergreen.V73.GroupPage.PressedSaveName

        Evergreen.V71.GroupPage.PressedResetName ->
            Evergreen.V73.GroupPage.PressedResetName

        Evergreen.V71.GroupPage.TypedName p0 ->
            Evergreen.V73.GroupPage.TypedName p0

        Evergreen.V71.GroupPage.PressedAddEvent ->
            Evergreen.V73.GroupPage.PressedAddEvent

        Evergreen.V71.GroupPage.PressedShowAllFutureEvents ->
            Evergreen.V73.GroupPage.PressedShowAllFutureEvents

        Evergreen.V71.GroupPage.PressedShowFirstFutureEvents ->
            Evergreen.V73.GroupPage.PressedShowFirstFutureEvents

        Evergreen.V71.GroupPage.ChangedNewEvent p0 ->
            Evergreen.V73.GroupPage.ChangedNewEvent (p0 |> migrate_GroupPage_NewEvent)

        Evergreen.V71.GroupPage.PressedCancelNewEvent ->
            Evergreen.V73.GroupPage.PressedCancelNewEvent

        Evergreen.V71.GroupPage.PressedCreateNewEvent ->
            Evergreen.V73.GroupPage.PressedCreateNewEvent

        Evergreen.V71.GroupPage.PressedLeaveEvent p0 ->
            Evergreen.V73.GroupPage.PressedLeaveEvent (p0 |> migrate_Group_EventId)

        Evergreen.V71.GroupPage.PressedJoinEvent p0 ->
            Evergreen.V73.GroupPage.PressedJoinEvent (p0 |> migrate_Group_EventId)

        Evergreen.V71.GroupPage.PressedEditEvent p0 ->
            Evergreen.V73.GroupPage.PressedEditEvent (p0 |> migrate_Group_EventId)

        Evergreen.V71.GroupPage.ChangedEditEvent p0 ->
            Evergreen.V73.GroupPage.ChangedEditEvent (p0 |> migrate_GroupPage_EditEvent)

        Evergreen.V71.GroupPage.PressedCancelEvent ->
            Evergreen.V73.GroupPage.PressedCancelEvent

        Evergreen.V71.GroupPage.PressedUncancelEvent ->
            Evergreen.V73.GroupPage.PressedUncancelEvent

        Evergreen.V71.GroupPage.PressedSubmitEditEvent ->
            Evergreen.V73.GroupPage.PressedSubmitEditEvent

        Evergreen.V71.GroupPage.PressedCancelEditEvent ->
            Evergreen.V73.GroupPage.PressedCancelEditEvent

        Evergreen.V71.GroupPage.PressedMakeGroupPublic ->
            Evergreen.V73.GroupPage.PressedMakeGroupPublic

        Evergreen.V71.GroupPage.PressedMakeGroupUnlisted ->
            Evergreen.V73.GroupPage.PressedMakeGroupUnlisted

        Evergreen.V71.GroupPage.PressedDeleteGroup ->
            Evergreen.V73.GroupPage.PressedDeleteGroup

        Evergreen.V71.GroupPage.PressedCopyPreviousEvent ->
            Evergreen.V73.GroupPage.PressedCopyPreviousEvent

        Evergreen.V71.GroupPage.PressedSubscribe ->
            Evergreen.V73.GroupPage.PressedSubscribe

        Evergreen.V71.GroupPage.PressedUnsubscribe ->
            Evergreen.V73.GroupPage.PressedUnsubscribe

        Evergreen.V71.GroupPage.PressedShowAttendees p0 ->
            Evergreen.V73.GroupPage.PressedShowAttendees (p0 |> migrate_Group_EventId)

        Evergreen.V71.GroupPage.PressedHideAttendees p0 ->
            Evergreen.V73.GroupPage.PressedHideAttendees (p0 |> migrate_Group_EventId)

        Evergreen.V71.GroupPage.TypedDeleteGroup p0 ->
            Evergreen.V73.GroupPage.TypedDeleteGroup p0

        Evergreen.V71.GroupPage.PressedConfirmDeleteGroup ->
            Evergreen.V73.GroupPage.PressedConfirmDeleteGroup


migrate_GroupPage_NewEvent : Evergreen.V71.GroupPage.NewEvent -> Evergreen.V73.GroupPage.NewEvent
migrate_GroupPage_NewEvent old =
    { submitStatus = old.submitStatus |> migrate_GroupPage_SubmitStatus migrate_GroupPage_CreateEventError
    , eventName = old.eventName
    , description = old.description
    , meetingType = old.meetingType |> Maybe.map migrate_GroupPage_EventType
    , meetOnlineLink = old.meetOnlineLink
    , meetInPersonAddress = old.meetInPersonAddress
    , startDate = old.startDate
    , startTime = old.startTime
    , duration = old.duration
    , maxAttendees = old.maxAttendees
    }


migrate_GroupPage_SubmitStatus : (error_old -> error_new) -> Evergreen.V71.GroupPage.SubmitStatus error_old -> Evergreen.V73.GroupPage.SubmitStatus error_new
migrate_GroupPage_SubmitStatus migrate_error old =
    case old of
        Evergreen.V71.GroupPage.NotSubmitted p0 ->
            Evergreen.V73.GroupPage.NotSubmitted p0

        Evergreen.V71.GroupPage.IsSubmitting ->
            Evergreen.V73.GroupPage.IsSubmitting

        Evergreen.V71.GroupPage.Failed p0 ->
            Evergreen.V73.GroupPage.Failed (p0 |> migrate_error)


migrate_GroupPage_ToBackend : Evergreen.V71.GroupPage.ToBackend -> Evergreen.V73.GroupPage.ToBackend
migrate_GroupPage_ToBackend old =
    case old of
        Evergreen.V71.GroupPage.ChangeGroupNameRequest p0 ->
            Evergreen.V73.GroupPage.ChangeGroupNameRequest (p0 |> migrate_Untrusted_Untrusted migrate_GroupName_GroupName)

        Evergreen.V71.GroupPage.ChangeGroupDescriptionRequest p0 ->
            Evergreen.V73.GroupPage.ChangeGroupDescriptionRequest (p0 |> migrate_Untrusted_Untrusted migrate_Description_Description)

        Evergreen.V71.GroupPage.ChangeGroupVisibilityRequest p0 ->
            Evergreen.V73.GroupPage.ChangeGroupVisibilityRequest (p0 |> migrate_Group_GroupVisibility)

        Evergreen.V71.GroupPage.CreateEventRequest p0 p1 p2 p3 p4 p5 ->
            Evergreen.V73.GroupPage.CreateEventRequest (p0 |> migrate_Untrusted_Untrusted migrate_EventName_EventName)
                (p1 |> migrate_Untrusted_Untrusted migrate_Description_Description)
                (p2 |> migrate_Untrusted_Untrusted migrate_Event_EventType)
                p3
                (p4 |> migrate_Untrusted_Untrusted migrate_EventDuration_EventDuration)
                (p5 |> migrate_Untrusted_Untrusted migrate_MaxAttendees_MaxAttendees)

        Evergreen.V71.GroupPage.EditEventRequest p0 p1 p2 p3 p4 p5 p6 ->
            Evergreen.V73.GroupPage.EditEventRequest (p0 |> migrate_Group_EventId)
                (p1 |> migrate_Untrusted_Untrusted migrate_EventName_EventName)
                (p2 |> migrate_Untrusted_Untrusted migrate_Description_Description)
                (p3 |> migrate_Untrusted_Untrusted migrate_Event_EventType)
                p4
                (p5 |> migrate_Untrusted_Untrusted migrate_EventDuration_EventDuration)
                (p6 |> migrate_Untrusted_Untrusted migrate_MaxAttendees_MaxAttendees)

        Evergreen.V71.GroupPage.JoinEventRequest p0 ->
            Evergreen.V73.GroupPage.JoinEventRequest (p0 |> migrate_Group_EventId)

        Evergreen.V71.GroupPage.LeaveEventRequest p0 ->
            Evergreen.V73.GroupPage.LeaveEventRequest (p0 |> migrate_Group_EventId)

        Evergreen.V71.GroupPage.ChangeEventCancellationStatusRequest p0 p1 ->
            Evergreen.V73.GroupPage.ChangeEventCancellationStatusRequest (p0 |> migrate_Group_EventId)
                (p1 |> migrate_Event_CancellationStatus)

        Evergreen.V71.GroupPage.DeleteGroupAdminRequest ->
            Evergreen.V73.GroupPage.DeleteGroupAdminRequest

        Evergreen.V71.GroupPage.SubscribeRequest ->
            Evergreen.V73.GroupPage.SubscribeRequest

        Evergreen.V71.GroupPage.UnsubscribeRequest ->
            Evergreen.V73.GroupPage.UnsubscribeRequest

        Evergreen.V71.GroupPage.DeleteGroupUserRequest ->
            Evergreen.V73.GroupPage.DeleteGroupUserRequest


migrate_Group_EditCancellationStatusError : Evergreen.V71.Group.EditCancellationStatusError -> Evergreen.V73.Group.EditCancellationStatusError
migrate_Group_EditCancellationStatusError old =
    case old of
        Evergreen.V71.Group.CancellationStatusCantBeAfterEventStart ->
            Evergreen.V73.Group.CancellationStatusCantBeAfterEventStart

        Evergreen.V71.Group.CantChangeCancellationStatusOfOngoingEvent ->
            Evergreen.V73.Group.CantChangeCancellationStatusOfOngoingEvent

        Evergreen.V71.Group.CantChangeCancellationStatusOfPastEvent ->
            Evergreen.V73.Group.CantChangeCancellationStatusOfPastEvent

        Evergreen.V71.Group.EditEventNotFound_ ->
            Evergreen.V73.Group.EditEventNotFound_


migrate_Group_EditEventError : Evergreen.V71.Group.EditEventError -> Evergreen.V73.Group.EditEventError
migrate_Group_EditEventError old =
    case old of
        Evergreen.V71.Group.EditEventStartsInThePast ->
            Evergreen.V73.Group.EditEventStartsInThePast

        Evergreen.V71.Group.EditEventOverlapsOtherEvents p0 ->
            Evergreen.V73.Group.EditEventOverlapsOtherEvents (assocSetToSeqSet migrate_Group_EventId p0)

        Evergreen.V71.Group.CantEditPastEvent ->
            Evergreen.V73.Group.CantEditPastEvent

        Evergreen.V71.Group.CantChangeStartTimeOfOngoingEvent ->
            Evergreen.V73.Group.CantChangeStartTimeOfOngoingEvent

        Evergreen.V71.Group.EditEventNotFound ->
            Evergreen.V73.Group.EditEventNotFound


migrate_Group_EventId : Evergreen.V71.Group.EventId -> Evergreen.V73.Group.EventId
migrate_Group_EventId old =
    case old of
        Evergreen.V71.Group.EventId p0 ->
            Evergreen.V73.Group.EventId p0


migrate_Group_Group : Evergreen.V71.Group.Group -> Evergreen.V73.Group.Group
migrate_Group_Group old =
    case old of
        Evergreen.V71.Group.Group p0 ->
            Evergreen.V73.Group.Group
                { ownerId = p0.ownerId |> migrate_Id_Id
                , name = p0.name |> migrate_GroupName_GroupName
                , description = p0.description |> migrate_Description_Description
                , events = assocListToSeqDict migrate_Group_EventId migrate_Event_Event p0.events
                , visibility = p0.visibility |> migrate_Group_GroupVisibility
                , eventCounter = p0.eventCounter
                , createdAt = p0.createdAt
                , pendingReview = p0.pendingReview
                }


migrate_Group_GroupVisibility : Evergreen.V71.Group.GroupVisibility -> Evergreen.V73.Group.GroupVisibility
migrate_Group_GroupVisibility old =
    case old of
        Evergreen.V71.Group.UnlistedGroup ->
            Evergreen.V73.Group.UnlistedGroup

        Evergreen.V71.Group.PublicGroup ->
            Evergreen.V73.Group.PublicGroup


migrate_Group_JoinEventError : Evergreen.V71.Group.JoinEventError -> Evergreen.V73.Group.JoinEventError
migrate_Group_JoinEventError old =
    case old of
        Evergreen.V71.Group.NoSpotsLeftInEvent ->
            Evergreen.V73.Group.NoSpotsLeftInEvent

        Evergreen.V71.Group.EventNotFound ->
            Evergreen.V73.Group.EventNotFound


migrate_Id_Id : Evergreen.V71.Id.Id a_old -> Evergreen.V73.Id.Id a_new
migrate_Id_Id old =
    case old of
        Evergreen.V71.Id.Id p0 ->
            Evergreen.V73.Id.Id p0


migrate_Id_SessionIdFirst4Chars : Evergreen.V71.Id.SessionIdFirst4Chars -> Evergreen.V73.Id.SessionIdFirst4Chars
migrate_Id_SessionIdFirst4Chars old =
    case old of
        Evergreen.V71.Id.SessionIdFirst4Chars p0 ->
            Evergreen.V73.Id.SessionIdFirst4Chars p0


migrate_Link_Link : Evergreen.V71.Link.Link -> Evergreen.V73.Link.Link
migrate_Link_Link old =
    case old of
        Evergreen.V71.Link.Link p0 ->
            Evergreen.V73.Link.Link p0


migrate_List_Nonempty_Nonempty : (a_old -> a_new) -> List.Nonempty.Nonempty a_old -> List.Nonempty.Nonempty a_new
migrate_List_Nonempty_Nonempty migrate_a old =
    old |> List.Nonempty.map migrate_a


migrate_MaxAttendees_MaxAttendees : Evergreen.V71.MaxAttendees.MaxAttendees -> Evergreen.V73.MaxAttendees.MaxAttendees
migrate_MaxAttendees_MaxAttendees old =
    case old of
        Evergreen.V71.MaxAttendees.NoLimit ->
            Evergreen.V73.MaxAttendees.NoLimit

        Evergreen.V71.MaxAttendees.MaxAttendees p0 ->
            Evergreen.V73.MaxAttendees.MaxAttendees p0


migrate_Name_Name : Evergreen.V71.Name.Name -> Evergreen.V73.Name.Name
migrate_Name_Name old =
    case old of
        Evergreen.V71.Name.Name p0 ->
            Evergreen.V73.Name.Name p0


migrate_ProfileImage_ProfileImage : Evergreen.V71.ProfileImage.ProfileImage -> Evergreen.V73.ProfileImage.ProfileImage
migrate_ProfileImage_ProfileImage old =
    case old of
        Evergreen.V71.ProfileImage.DefaultImage ->
            Evergreen.V73.ProfileImage.DefaultImage

        Evergreen.V71.ProfileImage.CustomImage p0 ->
            Evergreen.V73.ProfileImage.CustomImage p0


migrate_ProfilePage_DragPart : Evergreen.V71.ProfilePage.DragPart -> Evergreen.V73.ProfilePage.DragPart
migrate_ProfilePage_DragPart old =
    case old of
        Evergreen.V71.ProfilePage.TopLeft ->
            Evergreen.V73.ProfilePage.TopLeft

        Evergreen.V71.ProfilePage.TopRight ->
            Evergreen.V73.ProfilePage.TopRight

        Evergreen.V71.ProfilePage.BottomLeft ->
            Evergreen.V73.ProfilePage.BottomLeft

        Evergreen.V71.ProfilePage.BottomRight ->
            Evergreen.V73.ProfilePage.BottomRight

        Evergreen.V71.ProfilePage.Center ->
            Evergreen.V73.ProfilePage.Center


migrate_ProfilePage_DragState : Evergreen.V71.ProfilePage.DragState -> Evergreen.V73.ProfilePage.DragState
migrate_ProfilePage_DragState old =
    { startX = old.startX
    , startY = old.startY
    , dragPart = old.dragPart |> migrate_ProfilePage_DragPart
    , currentX = old.currentX
    , currentY = old.currentY
    }


migrate_ProfilePage_Editable : (a_old -> a_new) -> Evergreen.V71.ProfilePage.Editable a_old -> Evergreen.V73.ProfilePage.Editable a_new
migrate_ProfilePage_Editable migrate_a old =
    case old of
        Evergreen.V71.ProfilePage.Unchanged ->
            Evergreen.V73.ProfilePage.Unchanged

        Evergreen.V71.ProfilePage.Editing p0 ->
            Evergreen.V73.ProfilePage.Editing (p0 |> migrate_a)


migrate_ProfilePage_Form : Evergreen.V71.ProfilePage.Form -> Evergreen.V73.ProfilePage.Form
migrate_ProfilePage_Form old =
    { name = old.name |> migrate_ProfilePage_Editable identity
    , description = old.description |> migrate_ProfilePage_Editable identity
    , emailAddress = old.emailAddress |> migrate_ProfilePage_Editable identity
    }


migrate_ProfilePage_ImageEdit : Evergreen.V71.ProfilePage.ImageEdit -> Evergreen.V73.ProfilePage.ImageEdit
migrate_ProfilePage_ImageEdit old =
    { x = old.x
    , y = old.y
    , size = old.size
    , imageUrl = old.imageUrl
    , dragState = old.dragState |> Maybe.map migrate_ProfilePage_DragState
    , imageSize = old.imageSize
    }


migrate_ProfilePage_Model : Evergreen.V71.ProfilePage.Model -> Evergreen.V73.ProfilePage.Model
migrate_ProfilePage_Model old =
    { form = old.form |> migrate_ProfilePage_Form
    , changeCounter = old.changeCounter
    , profileImage = old.profileImage |> migrate_ProfilePage_Editable (Maybe.map migrate_ProfilePage_ImageEdit)
    , profileImageSize = old.profileImageSize
    , pressedDeleteAccount = old.pressedDeleteAccount
    }


migrate_ProfilePage_Msg : Evergreen.V71.ProfilePage.Msg -> Evergreen.V73.ProfilePage.Msg
migrate_ProfilePage_Msg old =
    case old of
        Evergreen.V71.ProfilePage.FormChanged p0 ->
            Evergreen.V73.ProfilePage.FormChanged (p0 |> migrate_ProfilePage_Form)

        Evergreen.V71.ProfilePage.SleepFinished p0 ->
            Evergreen.V73.ProfilePage.SleepFinished p0

        Evergreen.V71.ProfilePage.PressedProfileImage ->
            Evergreen.V73.ProfilePage.PressedProfileImage

        Evergreen.V71.ProfilePage.SelectedImage p0 ->
            Evergreen.V73.ProfilePage.SelectedImage p0

        Evergreen.V71.ProfilePage.GotImageUrl p0 ->
            Evergreen.V73.ProfilePage.GotImageUrl p0

        Evergreen.V71.ProfilePage.PressedDeleteAccount ->
            Evergreen.V73.ProfilePage.PressedDeleteAccount

        Evergreen.V71.ProfilePage.MouseDownImageEditor p0 p1 ->
            Evergreen.V73.ProfilePage.MouseDownImageEditor p0 p1

        Evergreen.V71.ProfilePage.MouseUpImageEditor p0 p1 ->
            Evergreen.V73.ProfilePage.MouseUpImageEditor p0 p1

        Evergreen.V71.ProfilePage.MovedImageEditor p0 p1 ->
            Evergreen.V73.ProfilePage.MovedImageEditor p0 p1

        Evergreen.V71.ProfilePage.TouchEndImageEditor ->
            Evergreen.V73.ProfilePage.TouchEndImageEditor

        Evergreen.V71.ProfilePage.PressedConfirmImage ->
            Evergreen.V73.ProfilePage.PressedConfirmImage

        Evergreen.V71.ProfilePage.PressedCancelImage ->
            Evergreen.V73.ProfilePage.PressedCancelImage

        Evergreen.V71.ProfilePage.GotImageSize p0 ->
            Evergreen.V73.ProfilePage.GotImageSize p0

        Evergreen.V71.ProfilePage.CroppedImage p0 ->
            Evergreen.V73.ProfilePage.CroppedImage p0


migrate_ProfilePage_ToBackend : Evergreen.V71.ProfilePage.ToBackend -> Evergreen.V73.ProfilePage.ToBackend
migrate_ProfilePage_ToBackend old =
    case old of
        Evergreen.V71.ProfilePage.ChangeNameRequest p0 ->
            Evergreen.V73.ProfilePage.ChangeNameRequest (p0 |> migrate_Untrusted_Untrusted migrate_Name_Name)

        Evergreen.V71.ProfilePage.ChangeDescriptionRequest p0 ->
            Evergreen.V73.ProfilePage.ChangeDescriptionRequest (p0 |> migrate_Untrusted_Untrusted migrate_Description_Description)

        Evergreen.V71.ProfilePage.ChangeEmailAddressRequest p0 ->
            Evergreen.V73.ProfilePage.ChangeEmailAddressRequest (p0 |> migrate_Untrusted_Untrusted migrate_EmailAddress_EmailAddress)

        Evergreen.V71.ProfilePage.SendDeleteUserEmailRequest ->
            Evergreen.V73.ProfilePage.SendDeleteUserEmailRequest

        Evergreen.V71.ProfilePage.ChangeProfileImageRequest p0 ->
            Evergreen.V73.ProfilePage.ChangeProfileImageRequest (p0 |> migrate_Untrusted_Untrusted migrate_ProfileImage_ProfileImage)


migrate_Route_Route : Evergreen.V71.Route.Route -> Evergreen.V73.Route.Route
migrate_Route_Route old =
    case old of
        Evergreen.V71.Route.HomepageRoute ->
            Evergreen.V73.Route.HomepageRoute

        Evergreen.V71.Route.GroupRoute p0 p1 ->
            Evergreen.V73.Route.GroupRoute (p0 |> migrate_Id_Id)
                (p1 |> migrate_GroupName_GroupName)

        Evergreen.V71.Route.AdminRoute ->
            Evergreen.V73.Route.AdminRoute

        Evergreen.V71.Route.CreateGroupRoute ->
            Evergreen.V73.Route.CreateGroupRoute

        Evergreen.V71.Route.SearchGroupsRoute p0 ->
            Evergreen.V73.Route.SearchGroupsRoute p0

        Evergreen.V71.Route.MyGroupsRoute ->
            Evergreen.V73.Route.MyGroupsRoute

        Evergreen.V71.Route.MyProfileRoute ->
            Evergreen.V73.Route.MyProfileRoute

        Evergreen.V71.Route.UserRoute p0 p1 ->
            Evergreen.V73.Route.UserRoute (p0 |> migrate_Id_Id) (p1 |> migrate_Name_Name)

        Evergreen.V71.Route.PrivacyRoute ->
            Evergreen.V73.Route.PrivacyRoute

        Evergreen.V71.Route.TermsOfServiceRoute ->
            Evergreen.V73.Route.TermsOfServiceRoute

        Evergreen.V71.Route.CodeOfConductRoute ->
            Evergreen.V73.Route.CodeOfConductRoute

        Evergreen.V71.Route.FrequentQuestionsRoute ->
            Evergreen.V73.Route.FrequentQuestionsRoute


migrate_Route_Token : Evergreen.V71.Route.Token -> Evergreen.V73.Route.Token
migrate_Route_Token old =
    case old of
        Evergreen.V71.Route.NoToken ->
            Evergreen.V73.Route.NoToken

        Evergreen.V71.Route.LoginToken p0 p1 ->
            Evergreen.V73.Route.LoginToken (p0 |> migrate_Id_Id)
                (p1 |> Maybe.map (Tuple.mapBoth migrate_Id_Id migrate_Group_EventId))

        Evergreen.V71.Route.DeleteUserToken p0 ->
            Evergreen.V73.Route.DeleteUserToken (p0 |> migrate_Id_Id)


migrate_TimeZone_Error : Evergreen.V71.TimeZone.Error -> Evergreen.V73.TimeZone.Error
migrate_TimeZone_Error old =
    case old of
        Evergreen.V71.TimeZone.NoZoneName ->
            Evergreen.V73.TimeZone.NoZoneName

        Evergreen.V71.TimeZone.NoDataForZoneName p0 ->
            Evergreen.V73.TimeZone.NoDataForZoneName p0


migrate_Types_AdminCache : Evergreen.V71.Types.AdminCache -> Evergreen.V73.Types.AdminCache
migrate_Types_AdminCache old =
    case old of
        Evergreen.V71.Types.AdminCacheNotRequested ->
            Evergreen.V73.Types.AdminCacheNotRequested

        Evergreen.V71.Types.AdminCached p0 ->
            Evergreen.V73.Types.AdminCached (p0 |> migrate_Types_AdminModel)

        Evergreen.V71.Types.AdminCachePending ->
            Evergreen.V73.Types.AdminCachePending


migrate_Types_AdminModel : Evergreen.V71.Types.AdminModel -> Evergreen.V73.Types.AdminModel
migrate_Types_AdminModel old =
    { cachedEmailAddress = assocListToSeqDict migrate_Id_Id migrate_EmailAddress_EmailAddress old.cachedEmailAddress
    , logs = old.logs |> Array.map migrate_Types_Log
    , lastLogCheck = old.lastLogCheck
    }


migrate_Types_BackendUser : Evergreen.V71.Types.BackendUser -> Evergreen.V73.Types.BackendUser
migrate_Types_BackendUser old =
    { name = old.name |> migrate_Name_Name
    , description = old.description |> migrate_Description_Description
    , emailAddress = old.emailAddress |> migrate_EmailAddress_EmailAddress
    , profileImage = old.profileImage |> migrate_ProfileImage_ProfileImage
    , timezone = old.timezone
    , allowEventReminders = old.allowEventReminders
    , subscribedGroups = assocSetToSeqSet migrate_Id_Id old.subscribedGroups
    }


migrate_Types_ColorTheme : Evergreen.V71.Types.ColorTheme -> Evergreen.V73.Types.ColorTheme
migrate_Types_ColorTheme old =
    case old of
        Evergreen.V71.Types.LightTheme ->
            Evergreen.V73.Types.LightTheme

        Evergreen.V71.Types.DarkTheme ->
            Evergreen.V73.Types.DarkTheme


migrate_Types_FrontendModel : Evergreen.V71.Types.FrontendModel -> Evergreen.V73.Types.FrontendModel
migrate_Types_FrontendModel old =
    case old of
        Evergreen.V71.Types.Loading p0 ->
            Evergreen.V73.Types.Loading (p0 |> migrate_Types_LoadingFrontend)

        Evergreen.V71.Types.Loaded p0 ->
            Evergreen.V73.Types.Loaded (p0 |> migrate_Types_LoadedFrontend)


migrate_Types_FrontendMsg : Evergreen.V71.Types.FrontendMsg -> Evergreen.V73.Types.FrontendMsg
migrate_Types_FrontendMsg old =
    case old of
        Evergreen.V71.Types.NoOpFrontendMsg ->
            Evergreen.V73.Types.NoOpFrontendMsg

        Evergreen.V71.Types.UrlClicked p0 ->
            Evergreen.V73.Types.UrlClicked p0

        Evergreen.V71.Types.UrlChanged p0 ->
            Evergreen.V73.Types.UrlChanged p0

        Evergreen.V71.Types.GotTime p0 ->
            Evergreen.V73.Types.GotTime p0

        Evergreen.V71.Types.PressedLogin ->
            Evergreen.V73.Types.PressedLogin

        Evergreen.V71.Types.PressedLogout ->
            Evergreen.V73.Types.PressedLogout

        Evergreen.V71.Types.TypedEmail p0 ->
            Evergreen.V73.Types.TypedEmail p0

        Evergreen.V71.Types.PressedSubmitLogin ->
            Evergreen.V73.Types.PressedSubmitLogin

        Evergreen.V71.Types.PressedCancelLogin ->
            Evergreen.V73.Types.PressedCancelLogin

        Evergreen.V71.Types.CreateGroupPageMsg p0 ->
            Evergreen.V73.Types.CreateGroupPageMsg (p0 |> migrate_CreateGroupPage_Msg)

        Evergreen.V71.Types.ProfileFormMsg p0 ->
            Evergreen.V73.Types.ProfileFormMsg (p0 |> migrate_ProfilePage_Msg)

        Evergreen.V71.Types.TypedSearchText p0 ->
            Evergreen.V73.Types.TypedSearchText p0

        Evergreen.V71.Types.SubmittedSearchBox ->
            Evergreen.V73.Types.SubmittedSearchBox

        Evergreen.V71.Types.GroupPageMsg p0 ->
            Evergreen.V73.Types.GroupPageMsg (p0 |> migrate_GroupPage_Msg)

        Evergreen.V71.Types.GotWindowSize p0 p1 ->
            Evergreen.V73.Types.GotWindowSize p0 p1

        Evergreen.V71.Types.GotTimeZone p0 ->
            Evergreen.V73.Types.GotTimeZone (p0 |> Result.mapError migrate_TimeZone_Error)

        Evergreen.V71.Types.ScrolledToTop ->
            Evergreen.V73.Types.ScrolledToTop

        Evergreen.V71.Types.PressedEnableAdmin ->
            Evergreen.V73.Types.PressedEnableAdmin

        Evergreen.V71.Types.PressedDisableAdmin ->
            Evergreen.V73.Types.PressedDisableAdmin

        Evergreen.V71.Types.PressedThemeToggle ->
            Evergreen.V73.Types.PressedThemeToggle

        Evergreen.V71.Types.LanguageSelected p0 ->
            Evergreen.V73.Types.LanguageSelected (p0 |> migrate_Types_Language)

        Evergreen.V71.Types.GotPrefersDarkTheme p0 ->
            Evergreen.V73.Types.GotPrefersDarkTheme p0

        Evergreen.V71.Types.GotLanguage p0 ->
            Evergreen.V73.Types.GotLanguage p0

        Evergreen.V71.Types.ToggleLanguageSelect ->
            Evergreen.V73.Types.ToggleLanguageSelect


migrate_Types_GroupRequest : Evergreen.V71.Types.GroupRequest -> Evergreen.V73.Types.GroupRequest
migrate_Types_GroupRequest old =
    case old of
        Evergreen.V71.Types.GroupNotFound_ ->
            Evergreen.V73.Types.GroupNotFound_

        Evergreen.V71.Types.GroupFound_ p0 p1 ->
            Evergreen.V73.Types.GroupFound_ (p0 |> migrate_Group_Group)
                (assocListToSeqDict migrate_Id_Id migrate_FrontendUser p1)


migrate_Types_Language : Evergreen.V71.Types.Language -> Evergreen.V73.Types.Language
migrate_Types_Language old =
    case old of
        Evergreen.V71.Types.English ->
            Evergreen.V73.Types.English

        Evergreen.V71.Types.French ->
            Evergreen.V73.Types.French

        Evergreen.V71.Types.Spanish ->
            Evergreen.V73.Types.Spanish

        Evergreen.V71.Types.Thai ->
            Evergreen.V73.Types.Thai


migrate_Types_LoadedFrontend : Evergreen.V71.Types.LoadedFrontend -> Evergreen.V73.Types.LoadedFrontend
migrate_Types_LoadedFrontend old =
    { navigationKey = old.navigationKey
    , loginStatus = old.loginStatus |> migrate_Types_LoginStatus
    , route = old.route |> migrate_Route_Route
    , cachedGroups = assocListToSeqDict migrate_Id_Id (migrate_Cache_Cache migrate_Group_Group) old.cachedGroups
    , cachedUsers = assocListToSeqDict migrate_Id_Id (migrate_Cache_Cache migrate_FrontendUser) old.cachedUsers
    , time = old.time
    , timezone = old.timezone
    , lastConnectionCheck = old.lastConnectionCheck
    , loginForm = old.loginForm |> migrate_Types_LoginForm
    , logs = old.logs |> Maybe.map (Array.map migrate_Types_Log)
    , hasLoginTokenError = old.hasLoginTokenError
    , groupForm = old.groupForm |> migrate_CreateGroupPage_Model
    , groupCreated = old.groupCreated
    , accountDeletedResult = old.accountDeletedResult
    , searchText = old.searchText
    , searchList = old.searchList |> List.map migrate_Id_Id
    , windowWidth = old.windowWidth
    , windowHeight = old.windowHeight
    , groupPage = assocListToSeqDict migrate_Id_Id migrate_GroupPage_Model old.groupPage
    , loadedUserConfig = old.loadedUserConfig |> migrate_Types_LoadedUserConfig
    , miniLanguageSelectorOpened = old.miniLanguageSelectorOpened
    }


migrate_Cache_Cache : (a_old -> a_new) -> Evergreen.V71.Cache.Cache a_old -> Evergreen.V73.Cache.Cache a_new
migrate_Cache_Cache migrateA old =
    case old of
        Evergreen.V71.Cache.ItemDoesNotExist ->
            Evergreen.V73.Cache.ItemDoesNotExist

        Evergreen.V71.Cache.ItemCached item ->
            Evergreen.V73.Cache.ItemCached (migrateA item)

        Evergreen.V71.Cache.ItemRequestPending ->
            Evergreen.V73.Cache.ItemRequestPending


migrate_FrontendUser : Evergreen.V71.FrontendUser.FrontendUser -> Evergreen.V73.FrontendUser.FrontendUser
migrate_FrontendUser old =
    { name = migrate_Name_Name old.name
    , description = migrate_Description_Description old.description
    , profileImage = migrate_ProfileImage_ProfileImage old.profileImage
    }


migrate_GroupPage_EventOverlay : Evergreen.V71.GroupPage.EventOverlay -> Evergreen.V73.GroupPage.EventOverlay
migrate_GroupPage_EventOverlay old =
    case old of
        Evergreen.V71.GroupPage.AddingNewEvent ->
            Evergreen.V73.GroupPage.AddingNewEvent

        Evergreen.V71.GroupPage.EdittingEvent a b ->
            Evergreen.V73.GroupPage.EdittingEvent (migrate_Group_EventId a) (migrate_GroupPage_EditEvent b)


migrate_GroupPage_Model : Evergreen.V71.GroupPage.Model -> Evergreen.V73.GroupPage.Model
migrate_GroupPage_Model old =
    { name = migrate_GroupPage_Editable migrate_GroupName_GroupName old.name
    , description = migrate_GroupPage_Editable migrate_Description_Description old.description
    , eventOverlay = old.eventOverlay |> Maybe.map migrate_GroupPage_EventOverlay
    , newEvent = old.newEvent |> migrate_GroupPage_NewEvent
    , pendingJoinOrLeave = assocListToSeqDict migrate_Group_EventId migrate_GroupPage_JoinOrLeaveStatus old.pendingJoinOrLeave
    , showAllFutureEvents = old.showAllFutureEvents
    , pendingEventCancelOrUncancel = assocSetToSeqSet migrate_Group_EventId old.pendingEventCancelOrUncancel
    , pendingToggleVisibility = old.pendingToggleVisibility
    , subscribePending = migrate_GroupPage_SubscribeStatus old.subscribePending
    , showAttendees = assocSetToSeqSet migrate_Group_EventId old.showAttendees
    , showDeleteConfirm =
        Maybe.map
            (\a ->
                { groupName = a.groupName
                , submitStatus = migrate_GroupPage_SubmitStatus identity a.submitStatus
                }
            )
            old.showDeleteConfirm
    }


migrate_GroupPage_JoinOrLeaveStatus : Evergreen.V71.GroupPage.EventJoinOrLeaveStatus -> Evergreen.V73.GroupPage.EventJoinOrLeaveStatus
migrate_GroupPage_JoinOrLeaveStatus old =
    case old of
        Evergreen.V71.GroupPage.JoinOrLeavePending ->
            Evergreen.V73.GroupPage.JoinOrLeavePending

        Evergreen.V71.GroupPage.LeaveFailure ->
            Evergreen.V73.GroupPage.LeaveFailure

        Evergreen.V71.GroupPage.JoinFailure a ->
            Evergreen.V73.GroupPage.JoinFailure (migrate_Group_JoinEventError a)


migrate_GroupPage_SubscribeStatus : Evergreen.V71.GroupPage.SubscribeStatus -> Evergreen.V73.GroupPage.SubscribeStatus
migrate_GroupPage_SubscribeStatus old =
    case old of
        Evergreen.V71.GroupPage.NotPendingSubscribe ->
            Evergreen.V73.GroupPage.NotPendingSubscribe

        Evergreen.V71.GroupPage.PendingSubscribe ->
            Evergreen.V73.GroupPage.PendingSubscribe

        Evergreen.V71.GroupPage.PendingUnsubscribe ->
            Evergreen.V73.GroupPage.PendingUnsubscribe


migrate_GroupPage_Editable : (a_old -> a_new) -> Evergreen.V71.GroupPage.Editable a_old -> Evergreen.V73.GroupPage.Editable a_new
migrate_GroupPage_Editable migrateA old =
    case old of
        Evergreen.V71.GroupPage.Unchanged ->
            Evergreen.V73.GroupPage.Unchanged

        Evergreen.V71.GroupPage.Editing text ->
            Evergreen.V73.GroupPage.Editing text

        Evergreen.V71.GroupPage.Submiting validated ->
            Evergreen.V73.GroupPage.Submiting (migrateA validated)


migrate_Types_LoadedUserConfig : Evergreen.V71.Types.LoadedUserConfig -> Evergreen.V73.Types.LoadedUserConfig
migrate_Types_LoadedUserConfig old =
    { theme = old.theme |> migrate_Types_ColorTheme
    , language = old.language |> migrate_Types_Language
    }


migrate_Types_LoadingFrontend : Evergreen.V71.Types.LoadingFrontend -> Evergreen.V73.Types.LoadingFrontend
migrate_Types_LoadingFrontend old =
    { navigationKey = old.navigationKey
    , route = old.route |> migrate_Route_Route
    , routeToken = old.routeToken |> migrate_Route_Token
    , windowSize = old.windowSize
    , time = old.time
    , timezone = old.timezone
    , theme = old.theme |> migrate_Types_ColorTheme
    }


migrate_Types_Log : Evergreen.V71.Types.Log -> Evergreen.V73.Types.Log
migrate_Types_Log old =
    case old of
        Evergreen.V71.Types.LogUntrustedCheckFailed p0 p1 p2 ->
            Evergreen.V73.Types.LogUntrustedCheckFailed p0
                (p1 |> migrate_Types_ToBackend)
                (p2 |> migrate_Id_SessionIdFirst4Chars)

        Evergreen.V71.Types.LogLoginEmail p0 p1 p2 ->
            Evergreen.V73.Types.LogLoginEmail p0 p1 (p2 |> migrate_EmailAddress_EmailAddress)

        Evergreen.V71.Types.LogDeleteAccountEmail p0 p1 p2 ->
            Evergreen.V73.Types.LogDeleteAccountEmail p0 p1 (p2 |> migrate_Id_Id)

        Evergreen.V71.Types.LogEventReminderEmail p0 p1 p2 p3 p4 ->
            Evergreen.V73.Types.LogEventReminderEmail p0
                p1
                (p2 |> migrate_Id_Id)
                (p3 |> migrate_Id_Id)
                (p4 |> migrate_Group_EventId)

        Evergreen.V71.Types.LogNewEventNotificationEmail p0 p1 p2 p3 ->
            Evergreen.V73.Types.LogNewEventNotificationEmail p0
                p1
                (p2 |> migrate_Id_Id)
                (p3 |> migrate_Id_Id)

        Evergreen.V71.Types.LogLoginTokenEmailRequestRateLimited p0 p1 p2 ->
            Evergreen.V73.Types.LogLoginTokenEmailRequestRateLimited p0
                (p1 |> migrate_EmailAddress_EmailAddress)
                (p2 |> migrate_Id_SessionIdFirst4Chars)

        Evergreen.V71.Types.LogDeleteAccountEmailRequestRateLimited p0 p1 p2 ->
            Evergreen.V73.Types.LogDeleteAccountEmailRequestRateLimited p0
                (p1 |> migrate_Id_Id)
                (p2 |> migrate_Id_SessionIdFirst4Chars)


migrate_Types_LoggedIn_ : Evergreen.V71.Types.LoggedIn_ -> Evergreen.V73.Types.LoggedIn_
migrate_Types_LoggedIn_ old =
    { userId = old.userId |> migrate_Id_Id
    , emailAddress = old.emailAddress |> migrate_EmailAddress_EmailAddress
    , profileForm = old.profileForm |> migrate_ProfilePage_Model
    , myGroups = old.myGroups |> Maybe.map (assocSetToSeqSet migrate_Id_Id)
    , subscribedGroups = assocSetToSeqSet migrate_Id_Id old.subscribedGroups
    , adminState = old.adminState |> migrate_Types_AdminCache
    , adminStatus = old.adminStatus |> migrate_AdminStatus_AdminStatus
    }


migrate_Types_LoginForm : Evergreen.V71.Types.LoginForm -> Evergreen.V73.Types.LoginForm
migrate_Types_LoginForm old =
    { email = old.email
    , pressedSubmitEmail = old.pressedSubmitEmail
    , emailSent = old.emailSent |> Maybe.map migrate_EmailAddress_EmailAddress
    }


migrate_Types_LoginStatus : Evergreen.V71.Types.LoginStatus -> Evergreen.V73.Types.LoginStatus
migrate_Types_LoginStatus old =
    case old of
        Evergreen.V71.Types.LoginStatusPending ->
            Evergreen.V73.Types.LoginStatusPending

        Evergreen.V71.Types.LoggedIn p0 ->
            Evergreen.V73.Types.LoggedIn (p0 |> migrate_Types_LoggedIn_)

        Evergreen.V71.Types.NotLoggedIn p0 ->
            Evergreen.V73.Types.NotLoggedIn
                { showLogin = p0.showLogin
                , joiningEvent = p0.joiningEvent |> Maybe.map (Tuple.mapBoth migrate_Id_Id migrate_Group_EventId)
                }


migrate_Types_ToBackend : Evergreen.V71.Types.ToBackend -> Evergreen.V73.Types.ToBackend
migrate_Types_ToBackend old =
    case old of
        Evergreen.V71.Types.GetGroupRequest p0 ->
            Evergreen.V73.Types.GetGroupRequest (p0 |> migrate_Id_Id)

        Evergreen.V71.Types.GetUserRequest p0 ->
            Evergreen.V73.Types.GetUserRequest (p0 |> migrate_List_Nonempty_Nonempty migrate_Id_Id)

        Evergreen.V71.Types.CheckLoginRequest ->
            Evergreen.V73.Types.CheckLoginRequest

        Evergreen.V71.Types.LoginWithTokenRequest p0 p1 ->
            Evergreen.V73.Types.LoginWithTokenRequest (p0 |> migrate_Id_Id)
                (p1 |> Maybe.map (Tuple.mapBoth migrate_Id_Id migrate_Group_EventId))

        Evergreen.V71.Types.GetLoginTokenRequest p0 p1 p2 ->
            Evergreen.V73.Types.GetLoginTokenRequest (p0 |> migrate_Route_Route)
                (p1 |> migrate_Untrusted_Untrusted migrate_EmailAddress_EmailAddress)
                (p2 |> Maybe.map (Tuple.mapBoth migrate_Id_Id migrate_Group_EventId))

        Evergreen.V71.Types.GetAdminDataRequest ->
            Evergreen.V73.Types.GetAdminDataRequest

        Evergreen.V71.Types.LogoutRequest ->
            Evergreen.V73.Types.LogoutRequest

        Evergreen.V71.Types.CreateGroupRequest p0 p1 p2 ->
            Evergreen.V73.Types.CreateGroupRequest (p0 |> migrate_Untrusted_Untrusted migrate_GroupName_GroupName)
                (p1 |> migrate_Untrusted_Untrusted migrate_Description_Description)
                (p2 |> migrate_Group_GroupVisibility)

        Evergreen.V71.Types.DeleteUserRequest p0 ->
            Evergreen.V73.Types.DeleteUserRequest (p0 |> migrate_Id_Id)

        Evergreen.V71.Types.GetMyGroupsRequest ->
            Evergreen.V73.Types.GetMyGroupsRequest

        Evergreen.V71.Types.SearchGroupsRequest p0 ->
            Evergreen.V73.Types.SearchGroupsRequest p0

        Evergreen.V71.Types.GroupRequest p0 p1 ->
            Evergreen.V73.Types.GroupRequest (p0 |> migrate_Id_Id)
                (p1 |> migrate_GroupPage_ToBackend)

        Evergreen.V71.Types.ProfileFormRequest p0 ->
            Evergreen.V73.Types.ProfileFormRequest (p0 |> migrate_ProfilePage_ToBackend)


migrate_Types_ToFrontend : Evergreen.V71.Types.ToFrontend -> Evergreen.V73.Types.ToFrontend
migrate_Types_ToFrontend old =
    case old of
        Evergreen.V71.Types.GetGroupResponse p0 p1 ->
            Evergreen.V73.Types.GetGroupResponse (p0 |> migrate_Id_Id)
                (p1 |> migrate_Types_GroupRequest)

        Evergreen.V71.Types.GetUserResponse p0 ->
            Evergreen.V73.Types.GetUserResponse
                (assocListToSeqDict migrate_Id_Id
                    (Result.map migrate_FrontendUser)
                    p0
                )

        Evergreen.V71.Types.CheckLoginResponse p0 ->
            Evergreen.V73.Types.CheckLoginResponse
                (p0
                    |> Maybe.map
                        (\rec1 ->
                            { userId = rec1.userId |> migrate_Id_Id
                            , user = rec1.user |> migrate_Types_BackendUser
                            , isAdmin = rec1.isAdmin
                            }
                        )
                )

        Evergreen.V71.Types.LoginWithTokenResponse p0 ->
            Evergreen.V73.Types.LoginWithTokenResponse
                (p0
                    |> Result.map
                        (\rec1 ->
                            { userId = rec1.userId |> migrate_Id_Id
                            , user = rec1.user |> migrate_Types_BackendUser
                            , isAdmin = rec1.isAdmin
                            }
                        )
                )

        Evergreen.V71.Types.GetAdminDataResponse p0 ->
            Evergreen.V73.Types.GetAdminDataResponse (p0 |> migrate_Types_AdminModel)

        Evergreen.V71.Types.CreateGroupResponse p0 ->
            Evergreen.V73.Types.CreateGroupResponse (p0 |> Result.mapError migrate_CreateGroupPage_CreateGroupError >> Result.map (Tuple.mapBoth migrate_Id_Id migrate_Group_Group))

        Evergreen.V71.Types.LogoutResponse ->
            Evergreen.V73.Types.LogoutResponse

        Evergreen.V71.Types.ChangeNameResponse p0 ->
            Evergreen.V73.Types.ChangeNameResponse (p0 |> migrate_Name_Name)

        Evergreen.V71.Types.ChangeDescriptionResponse p0 ->
            Evergreen.V73.Types.ChangeDescriptionResponse (p0 |> migrate_Description_Description)

        Evergreen.V71.Types.ChangeEmailAddressResponse p0 ->
            Evergreen.V73.Types.ChangeEmailAddressResponse (p0 |> migrate_EmailAddress_EmailAddress)

        Evergreen.V71.Types.DeleteUserResponse p0 ->
            Evergreen.V73.Types.DeleteUserResponse p0

        Evergreen.V71.Types.ChangeProfileImageResponse p0 ->
            Evergreen.V73.Types.ChangeProfileImageResponse (p0 |> migrate_ProfileImage_ProfileImage)

        Evergreen.V71.Types.GetMyGroupsResponse p0 ->
            Evergreen.V73.Types.GetMyGroupsResponse
                { myGroups = p0.myGroups |> List.map (Tuple.mapBoth migrate_Id_Id migrate_Group_Group)
                , subscribedGroups = p0.subscribedGroups |> List.map (Tuple.mapBoth migrate_Id_Id migrate_Group_Group)
                }

        Evergreen.V71.Types.SearchGroupsResponse p0 p1 ->
            Evergreen.V73.Types.SearchGroupsResponse p0
                (p1 |> List.map (Tuple.mapBoth migrate_Id_Id migrate_Group_Group))

        Evergreen.V71.Types.ChangeGroupNameResponse p0 p1 ->
            Evergreen.V73.Types.ChangeGroupNameResponse (p0 |> migrate_Id_Id)
                (p1 |> migrate_GroupName_GroupName)

        Evergreen.V71.Types.ChangeGroupDescriptionResponse p0 p1 ->
            Evergreen.V73.Types.ChangeGroupDescriptionResponse (p0 |> migrate_Id_Id)
                (p1 |> migrate_Description_Description)

        Evergreen.V71.Types.ChangeGroupVisibilityResponse p0 p1 ->
            Evergreen.V73.Types.ChangeGroupVisibilityResponse (p0 |> migrate_Id_Id)
                (p1 |> migrate_Group_GroupVisibility)

        Evergreen.V71.Types.CreateEventResponse p0 p1 ->
            Evergreen.V73.Types.CreateEventResponse (p0 |> migrate_Id_Id)
                (p1 |> Result.mapError migrate_GroupPage_CreateEventError >> Result.map migrate_Event_Event)

        Evergreen.V71.Types.EditEventResponse p0 p1 p2 p3 ->
            Evergreen.V73.Types.EditEventResponse (p0 |> migrate_Id_Id)
                (p1 |> migrate_Group_EventId)
                (p2 |> Result.mapError migrate_Group_EditEventError >> Result.map migrate_Event_Event)
                p3

        Evergreen.V71.Types.JoinEventResponse p0 p1 p2 ->
            Evergreen.V73.Types.JoinEventResponse (p0 |> migrate_Id_Id)
                (p1 |> migrate_Group_EventId)
                (p2 |> Result.mapError migrate_Group_JoinEventError)

        Evergreen.V71.Types.LeaveEventResponse p0 p1 p2 ->
            Evergreen.V73.Types.LeaveEventResponse (p0 |> migrate_Id_Id)
                (p1 |> migrate_Group_EventId)
                p2

        Evergreen.V71.Types.ChangeEventCancellationStatusResponse p0 p1 p2 p3 ->
            Evergreen.V73.Types.ChangeEventCancellationStatusResponse (p0 |> migrate_Id_Id)
                (p1 |> migrate_Group_EventId)
                (p2 |> Result.mapError migrate_Group_EditCancellationStatusError >> Result.map migrate_Event_CancellationStatus)
                p3

        Evergreen.V71.Types.DeleteGroupAdminResponse p0 ->
            Evergreen.V73.Types.DeleteGroupAdminResponse (p0 |> migrate_Id_Id)

        Evergreen.V71.Types.SubscribeResponse p0 ->
            Evergreen.V73.Types.SubscribeResponse (p0 |> migrate_Id_Id)

        Evergreen.V71.Types.UnsubscribeResponse p0 ->
            Evergreen.V73.Types.UnsubscribeResponse (p0 |> migrate_Id_Id)

        Evergreen.V71.Types.DeleteGroupUserResponse p0 ->
            Evergreen.V73.Types.DeleteGroupUserResponse (p0 |> migrate_Id_Id)


migrate_Untrusted_Untrusted : (a_old -> a_new) -> Evergreen.V71.Untrusted.Untrusted a_old -> Evergreen.V73.Untrusted.Untrusted a_new
migrate_Untrusted_Untrusted migrate_a old =
    case old of
        Evergreen.V71.Untrusted.Untrusted p0 ->
            Evergreen.V73.Untrusted.Untrusted (p0 |> migrate_a)
