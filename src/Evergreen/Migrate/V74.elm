module Evergreen.Migrate.V74 exposing (..)

{-| This migration file was automatically generated by the lamdera compiler.

It includes:

  - A migration for each of the 6 Lamdera core types that has changed
  - A function named `migrate_ModuleName_TypeName` for each changed/custom type

Expect to see:

  - `Unimplement–µd` values as placeholders wherever I was unable to figure out a clear migration path for you
  - `@NOTICE` comments for things you should know about, i.e. new custom type constructors that won't get any
    value mappings from the old type by default

You can edit this file however you wish! It won't be generated again.

See <https://dashboard.lamdera.app/docs/evergreen> for more info.

-}

import Array
import Evergreen.V73.Address
import Evergreen.V73.AdminStatus
import Evergreen.V73.Cache
import Evergreen.V73.CreateGroupPage
import Evergreen.V73.Description
import Evergreen.V73.EmailAddress
import Evergreen.V73.Event
import Evergreen.V73.EventDuration
import Evergreen.V73.EventName
import Evergreen.V73.FrontendUser
import Evergreen.V73.Group
import Evergreen.V73.GroupName
import Evergreen.V73.GroupPage
import Evergreen.V73.Id
import Evergreen.V73.Link
import Evergreen.V73.MaxAttendees
import Evergreen.V73.Name
import Evergreen.V73.ProfileImage
import Evergreen.V73.ProfilePage
import Evergreen.V73.Route
import Evergreen.V73.Types
import Evergreen.V73.Untrusted
import Evergreen.V74.Address
import Evergreen.V74.AdminStatus
import Evergreen.V74.Cache
import Evergreen.V74.CreateGroupPage
import Evergreen.V74.Description
import Evergreen.V74.EmailAddress
import Evergreen.V74.Event
import Evergreen.V74.EventDuration
import Evergreen.V74.EventName
import Evergreen.V74.FrontendUser
import Evergreen.V74.Group
import Evergreen.V74.GroupName
import Evergreen.V74.GroupPage
import Evergreen.V74.Id
import Evergreen.V74.Link
import Evergreen.V74.MaxAttendees
import Evergreen.V74.Name
import Evergreen.V74.ProfileImage
import Evergreen.V74.ProfilePage
import Evergreen.V74.Route
import Evergreen.V74.Types
import Evergreen.V74.Untrusted
import Lamdera.Migrations exposing (..)
import List
import List.Nonempty
import Maybe
import SeqDict
import SeqSet


frontendModel : Evergreen.V73.Types.FrontendModel -> ModelMigration Evergreen.V74.Types.FrontendModel Evergreen.V74.Types.FrontendMsg
frontendModel old =
    ModelMigrated ( migrate_Types_FrontendModel old, Cmd.none )


backendModel : Evergreen.V73.Types.BackendModel -> ModelMigration Evergreen.V74.Types.BackendModel Evergreen.V74.Types.BackendMsg
backendModel old =
    ModelUnchanged


frontendMsg : Evergreen.V73.Types.FrontendMsg -> MsgMigration Evergreen.V74.Types.FrontendMsg Evergreen.V74.Types.FrontendMsg
frontendMsg old =
    MsgUnchanged


toBackend : Evergreen.V73.Types.ToBackend -> MsgMigration Evergreen.V74.Types.ToBackend Evergreen.V74.Types.BackendMsg
toBackend old =
    MsgUnchanged


backendMsg : Evergreen.V73.Types.BackendMsg -> MsgMigration Evergreen.V74.Types.BackendMsg Evergreen.V74.Types.BackendMsg
backendMsg old =
    MsgUnchanged


toFrontend : Evergreen.V73.Types.ToFrontend -> MsgMigration Evergreen.V74.Types.ToFrontend Evergreen.V74.Types.FrontendMsg
toFrontend old =
    MsgUnchanged


migrate_Address_Address : Evergreen.V73.Address.Address -> Evergreen.V74.Address.Address
migrate_Address_Address old =
    case old of
        Evergreen.V73.Address.Address p0 ->
            Evergreen.V74.Address.Address p0


migrate_AdminStatus_AdminStatus : Evergreen.V73.AdminStatus.AdminStatus -> Evergreen.V74.AdminStatus.AdminStatus
migrate_AdminStatus_AdminStatus old =
    case old of
        Evergreen.V73.AdminStatus.IsNotAdmin ->
            Evergreen.V74.AdminStatus.IsNotAdmin

        Evergreen.V73.AdminStatus.IsAdminButDisabled ->
            Evergreen.V74.AdminStatus.IsAdminButDisabled

        Evergreen.V73.AdminStatus.IsAdminAndEnabled ->
            Evergreen.V74.AdminStatus.IsAdminAndEnabled


migrate_Cache_Cache : (item_old -> item_new) -> Evergreen.V73.Cache.Cache item_old -> Evergreen.V74.Cache.Cache item_new
migrate_Cache_Cache migrate_item old =
    case old of
        Evergreen.V73.Cache.ItemDoesNotExist ->
            Evergreen.V74.Cache.ItemDoesNotExist

        Evergreen.V73.Cache.ItemCached p0 ->
            Evergreen.V74.Cache.ItemCached (p0 |> migrate_item)

        Evergreen.V73.Cache.ItemRequestPending ->
            Evergreen.V74.Cache.ItemRequestPending


migrate_CreateGroupPage_CreateGroupError : Evergreen.V73.CreateGroupPage.CreateGroupError -> Evergreen.V74.CreateGroupPage.CreateGroupError
migrate_CreateGroupPage_CreateGroupError old =
    case old of
        Evergreen.V73.CreateGroupPage.GroupNameAlreadyInUse ->
            Evergreen.V74.CreateGroupPage.GroupNameAlreadyInUse


migrate_CreateGroupPage_Form : Evergreen.V73.CreateGroupPage.Form -> Evergreen.V74.CreateGroupPage.Form
migrate_CreateGroupPage_Form old =
    { pressedSubmit = old.pressedSubmit
    , name = old.name
    , description = old.description
    , visibility = old.visibility |> Maybe.map migrate_Group_GroupVisibility
    }


migrate_CreateGroupPage_GroupFormValidated : Evergreen.V73.CreateGroupPage.GroupFormValidated -> Evergreen.V74.CreateGroupPage.GroupFormValidated
migrate_CreateGroupPage_GroupFormValidated old =
    { name = old.name |> migrate_GroupName_GroupName
    , description = old.description |> migrate_Description_Description
    , visibility = old.visibility |> migrate_Group_GroupVisibility
    }


migrate_CreateGroupPage_Model : Evergreen.V73.CreateGroupPage.Model -> Evergreen.V74.CreateGroupPage.Model
migrate_CreateGroupPage_Model old =
    case old of
        Evergreen.V73.CreateGroupPage.Editting p0 ->
            Evergreen.V74.CreateGroupPage.Editting (p0 |> migrate_CreateGroupPage_Form)

        Evergreen.V73.CreateGroupPage.Submitting p0 ->
            Evergreen.V74.CreateGroupPage.Submitting (p0 |> migrate_CreateGroupPage_GroupFormValidated)

        Evergreen.V73.CreateGroupPage.SubmitFailed p0 p1 ->
            Evergreen.V74.CreateGroupPage.SubmitFailed (p0 |> migrate_CreateGroupPage_CreateGroupError)
                (p1 |> migrate_CreateGroupPage_Form)


migrate_Description_Description : Evergreen.V73.Description.Description -> Evergreen.V74.Description.Description
migrate_Description_Description old =
    case old of
        Evergreen.V73.Description.Description p0 ->
            Evergreen.V74.Description.Description p0


migrate_EmailAddress_EmailAddress : Evergreen.V73.EmailAddress.EmailAddress -> Evergreen.V74.EmailAddress.EmailAddress
migrate_EmailAddress_EmailAddress old =
    case old of
        Evergreen.V73.EmailAddress.EmailAddress p0 ->
            Evergreen.V74.EmailAddress.EmailAddress p0


migrate_EventDuration_EventDuration : Evergreen.V73.EventDuration.EventDuration -> Evergreen.V74.EventDuration.EventDuration
migrate_EventDuration_EventDuration old =
    case old of
        Evergreen.V73.EventDuration.EventDuration p0 ->
            Evergreen.V74.EventDuration.EventDuration p0


migrate_EventName_EventName : Evergreen.V73.EventName.EventName -> Evergreen.V74.EventName.EventName
migrate_EventName_EventName old =
    case old of
        Evergreen.V73.EventName.EventName p0 ->
            Evergreen.V74.EventName.EventName p0


migrate_Event_CancellationStatus : Evergreen.V73.Event.CancellationStatus -> Evergreen.V74.Event.CancellationStatus
migrate_Event_CancellationStatus old =
    case old of
        Evergreen.V73.Event.EventCancelled ->
            Evergreen.V74.Event.EventCancelled

        Evergreen.V73.Event.EventUncancelled ->
            Evergreen.V74.Event.EventUncancelled


migrate_Event_Event : Evergreen.V73.Event.Event -> Evergreen.V74.Event.Event
migrate_Event_Event old =
    case old of
        Evergreen.V73.Event.Event p0 ->
            Evergreen.V74.Event.Event
                { name = p0.name |> migrate_EventName_EventName
                , description = p0.description |> migrate_Description_Description
                , eventType = p0.eventType |> migrate_Event_EventType
                , attendees = p0.attendees |> SeqSet.map migrate_Id_Id
                , startTime = p0.startTime
                , duration = p0.duration |> migrate_EventDuration_EventDuration
                , cancellationStatus = p0.cancellationStatus |> Maybe.map (Tuple.mapFirst migrate_Event_CancellationStatus)
                , createdAt = p0.createdAt
                , maxAttendees = p0.maxAttendees |> migrate_MaxAttendees_MaxAttendees
                }


migrate_Event_EventType : Evergreen.V73.Event.EventType -> Evergreen.V74.Event.EventType
migrate_Event_EventType old =
    case old of
        Evergreen.V73.Event.MeetOnline p0 ->
            Evergreen.V74.Event.MeetOnline (p0 |> Maybe.map migrate_Link_Link)

        Evergreen.V73.Event.MeetInPerson p0 ->
            Evergreen.V74.Event.MeetInPerson (p0 |> Maybe.map migrate_Address_Address)

        Evergreen.V73.Event.MeetOnlineAndInPerson p0 p1 ->
            Evergreen.V74.Event.MeetOnlineAndInPerson (p0 |> Maybe.map migrate_Link_Link)
                (p1 |> Maybe.map migrate_Address_Address)


migrate_FrontendUser_FrontendUser : Evergreen.V73.FrontendUser.FrontendUser -> Evergreen.V74.FrontendUser.FrontendUser
migrate_FrontendUser_FrontendUser old =
    { name = old.name |> migrate_Name_Name
    , description = old.description |> migrate_Description_Description
    , profileImage = old.profileImage |> migrate_ProfileImage_ProfileImage
    }


migrate_GroupName_GroupName : Evergreen.V73.GroupName.GroupName -> Evergreen.V74.GroupName.GroupName
migrate_GroupName_GroupName old =
    case old of
        Evergreen.V73.GroupName.GroupName p0 ->
            Evergreen.V74.GroupName.GroupName p0


migrate_GroupPage_CreateEventError : Evergreen.V73.GroupPage.CreateEventError -> Evergreen.V74.GroupPage.CreateEventError
migrate_GroupPage_CreateEventError old =
    case old of
        Evergreen.V73.GroupPage.EventStartsInThePast ->
            Evergreen.V74.GroupPage.EventStartsInThePast

        Evergreen.V73.GroupPage.EventOverlapsOtherEvents p0 ->
            Evergreen.V74.GroupPage.EventOverlapsOtherEvents (p0 |> SeqSet.map migrate_Group_EventId)

        Evergreen.V73.GroupPage.TooManyEvents ->
            Evergreen.V74.GroupPage.TooManyEvents


migrate_GroupPage_EditEvent : Evergreen.V73.GroupPage.EditEvent -> Evergreen.V74.GroupPage.EditEvent
migrate_GroupPage_EditEvent old =
    { submitStatus = old.submitStatus |> migrate_GroupPage_SubmitStatus migrate_Group_EditEventError
    , eventName = old.eventName
    , description = old.description
    , meetingType = old.meetingType |> migrate_GroupPage_EventType
    , meetOnlineLink = old.meetOnlineLink
    , meetInPersonAddress = old.meetInPersonAddress
    , startDate = old.startDate
    , startTime = old.startTime
    , duration = old.duration
    , maxAttendees = old.maxAttendees
    }


migrate_GroupPage_Editable : (validated_old -> validated_new) -> Evergreen.V73.GroupPage.Editable validated_old -> Evergreen.V74.GroupPage.Editable validated_new
migrate_GroupPage_Editable migrate_validated old =
    case old of
        Evergreen.V73.GroupPage.Unchanged ->
            Evergreen.V74.GroupPage.Unchanged

        Evergreen.V73.GroupPage.Editing p0 ->
            Evergreen.V74.GroupPage.Editing p0

        Evergreen.V73.GroupPage.Submiting p0 ->
            Evergreen.V74.GroupPage.Submiting (p0 |> migrate_validated)


migrate_GroupPage_EventJoinOrLeaveStatus : Evergreen.V73.GroupPage.EventJoinOrLeaveStatus -> Evergreen.V74.GroupPage.EventJoinOrLeaveStatus
migrate_GroupPage_EventJoinOrLeaveStatus old =
    case old of
        Evergreen.V73.GroupPage.JoinOrLeavePending ->
            Evergreen.V74.GroupPage.JoinOrLeavePending

        Evergreen.V73.GroupPage.LeaveFailure ->
            Evergreen.V74.GroupPage.LeaveFailure

        Evergreen.V73.GroupPage.JoinFailure p0 ->
            Evergreen.V74.GroupPage.JoinFailure (p0 |> migrate_Group_JoinEventError)


migrate_GroupPage_EventOverlay : Evergreen.V73.GroupPage.EventOverlay -> Evergreen.V74.GroupPage.EventOverlay
migrate_GroupPage_EventOverlay old =
    case old of
        Evergreen.V73.GroupPage.AddingNewEvent ->
            Evergreen.V74.GroupPage.AddingNewEvent

        Evergreen.V73.GroupPage.EdittingEvent p0 p1 ->
            Evergreen.V74.GroupPage.EdittingEvent (p0 |> migrate_Group_EventId)
                (p1 |> migrate_GroupPage_EditEvent)


migrate_GroupPage_EventType : Evergreen.V73.GroupPage.EventType -> Evergreen.V74.GroupPage.EventType
migrate_GroupPage_EventType old =
    case old of
        Evergreen.V73.GroupPage.MeetOnline ->
            Evergreen.V74.GroupPage.MeetOnline

        Evergreen.V73.GroupPage.MeetInPerson ->
            Evergreen.V74.GroupPage.MeetInPerson

        Evergreen.V73.GroupPage.MeetOnlineAndInPerson ->
            Evergreen.V74.GroupPage.MeetOnlineAndInPerson


migrate_GroupPage_Model : Evergreen.V73.GroupPage.Model -> Evergreen.V74.GroupPage.Model
migrate_GroupPage_Model old =
    { name = old.name |> migrate_GroupPage_Editable migrate_GroupName_GroupName
    , description = old.description |> migrate_GroupPage_Editable migrate_Description_Description
    , eventOverlay = old.eventOverlay |> Maybe.map migrate_GroupPage_EventOverlay
    , newEvent = old.newEvent |> migrate_GroupPage_NewEvent
    , pendingJoinOrLeave = old.pendingJoinOrLeave |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Group_EventId migrate_GroupPage_EventJoinOrLeaveStatus) |> SeqDict.fromList
    , showAllFutureEvents = old.showAllFutureEvents
    , pendingEventCancelOrUncancel = old.pendingEventCancelOrUncancel |> SeqSet.map migrate_Group_EventId
    , pendingToggleVisibility = old.pendingToggleVisibility
    , subscribePending = old.subscribePending |> migrate_GroupPage_SubscribeStatus
    , showAttendees = old.showAttendees |> SeqSet.map migrate_Group_EventId
    , showDeleteConfirm =
        old.showDeleteConfirm
            |> Maybe.map
                (\rec ->
                    { groupName = rec.groupName
                    , submitStatus = rec.submitStatus |> migrate_GroupPage_SubmitStatus identity
                    }
                )
    }


migrate_GroupPage_NewEvent : Evergreen.V73.GroupPage.NewEvent -> Evergreen.V74.GroupPage.NewEvent
migrate_GroupPage_NewEvent old =
    { submitStatus = old.submitStatus |> migrate_GroupPage_SubmitStatus migrate_GroupPage_CreateEventError
    , eventName = old.eventName
    , description = old.description
    , meetingType = old.meetingType |> Maybe.map migrate_GroupPage_EventType
    , meetOnlineLink = old.meetOnlineLink
    , meetInPersonAddress = old.meetInPersonAddress
    , startDate = old.startDate
    , startTime = old.startTime
    , duration = old.duration
    , maxAttendees = old.maxAttendees
    }


migrate_GroupPage_SubmitStatus : (error_old -> error_new) -> Evergreen.V73.GroupPage.SubmitStatus error_old -> Evergreen.V74.GroupPage.SubmitStatus error_new
migrate_GroupPage_SubmitStatus migrate_error old =
    case old of
        Evergreen.V73.GroupPage.NotSubmitted p0 ->
            Evergreen.V74.GroupPage.NotSubmitted p0

        Evergreen.V73.GroupPage.IsSubmitting ->
            Evergreen.V74.GroupPage.IsSubmitting

        Evergreen.V73.GroupPage.Failed p0 ->
            Evergreen.V74.GroupPage.Failed (p0 |> migrate_error)


migrate_GroupPage_SubscribeStatus : Evergreen.V73.GroupPage.SubscribeStatus -> Evergreen.V74.GroupPage.SubscribeStatus
migrate_GroupPage_SubscribeStatus old =
    case old of
        Evergreen.V73.GroupPage.NotPendingSubscribe ->
            Evergreen.V74.GroupPage.NotPendingSubscribe

        Evergreen.V73.GroupPage.PendingSubscribe ->
            Evergreen.V74.GroupPage.PendingSubscribe

        Evergreen.V73.GroupPage.PendingUnsubscribe ->
            Evergreen.V74.GroupPage.PendingUnsubscribe


migrate_GroupPage_ToBackend : Evergreen.V73.GroupPage.ToBackend -> Evergreen.V74.GroupPage.ToBackend
migrate_GroupPage_ToBackend old =
    case old of
        Evergreen.V73.GroupPage.ChangeGroupNameRequest p0 ->
            Evergreen.V74.GroupPage.ChangeGroupNameRequest (p0 |> migrate_Untrusted_Untrusted migrate_GroupName_GroupName)

        Evergreen.V73.GroupPage.ChangeGroupDescriptionRequest p0 ->
            Evergreen.V74.GroupPage.ChangeGroupDescriptionRequest (p0 |> migrate_Untrusted_Untrusted migrate_Description_Description)

        Evergreen.V73.GroupPage.ChangeGroupVisibilityRequest p0 ->
            Evergreen.V74.GroupPage.ChangeGroupVisibilityRequest (p0 |> migrate_Group_GroupVisibility)

        Evergreen.V73.GroupPage.CreateEventRequest p0 p1 p2 p3 p4 p5 ->
            Evergreen.V74.GroupPage.CreateEventRequest (p0 |> migrate_Untrusted_Untrusted migrate_EventName_EventName)
                (p1 |> migrate_Untrusted_Untrusted migrate_Description_Description)
                (p2 |> migrate_Untrusted_Untrusted migrate_Event_EventType)
                p3
                (p4 |> migrate_Untrusted_Untrusted migrate_EventDuration_EventDuration)
                (p5 |> migrate_Untrusted_Untrusted migrate_MaxAttendees_MaxAttendees)

        Evergreen.V73.GroupPage.EditEventRequest p0 p1 p2 p3 p4 p5 p6 ->
            Evergreen.V74.GroupPage.EditEventRequest (p0 |> migrate_Group_EventId)
                (p1 |> migrate_Untrusted_Untrusted migrate_EventName_EventName)
                (p2 |> migrate_Untrusted_Untrusted migrate_Description_Description)
                (p3 |> migrate_Untrusted_Untrusted migrate_Event_EventType)
                p4
                (p5 |> migrate_Untrusted_Untrusted migrate_EventDuration_EventDuration)
                (p6 |> migrate_Untrusted_Untrusted migrate_MaxAttendees_MaxAttendees)

        Evergreen.V73.GroupPage.JoinEventRequest p0 ->
            Evergreen.V74.GroupPage.JoinEventRequest (p0 |> migrate_Group_EventId)

        Evergreen.V73.GroupPage.LeaveEventRequest p0 ->
            Evergreen.V74.GroupPage.LeaveEventRequest (p0 |> migrate_Group_EventId)

        Evergreen.V73.GroupPage.ChangeEventCancellationStatusRequest p0 p1 ->
            Evergreen.V74.GroupPage.ChangeEventCancellationStatusRequest (p0 |> migrate_Group_EventId)
                (p1 |> migrate_Event_CancellationStatus)

        Evergreen.V73.GroupPage.DeleteGroupAdminRequest ->
            Evergreen.V74.GroupPage.DeleteGroupAdminRequest

        Evergreen.V73.GroupPage.SubscribeRequest ->
            Evergreen.V74.GroupPage.SubscribeRequest

        Evergreen.V73.GroupPage.UnsubscribeRequest ->
            Evergreen.V74.GroupPage.UnsubscribeRequest

        Evergreen.V73.GroupPage.DeleteGroupUserRequest ->
            Evergreen.V74.GroupPage.DeleteGroupUserRequest


migrate_Group_EditEventError : Evergreen.V73.Group.EditEventError -> Evergreen.V74.Group.EditEventError
migrate_Group_EditEventError old =
    case old of
        Evergreen.V73.Group.EditEventStartsInThePast ->
            Evergreen.V74.Group.EditEventStartsInThePast

        Evergreen.V73.Group.EditEventOverlapsOtherEvents p0 ->
            Evergreen.V74.Group.EditEventOverlapsOtherEvents (p0 |> SeqSet.map migrate_Group_EventId)

        Evergreen.V73.Group.CantEditPastEvent ->
            Evergreen.V74.Group.CantEditPastEvent

        Evergreen.V73.Group.CantChangeStartTimeOfOngoingEvent ->
            Evergreen.V74.Group.CantChangeStartTimeOfOngoingEvent

        Evergreen.V73.Group.EditEventNotFound ->
            Evergreen.V74.Group.EditEventNotFound


migrate_Group_EventId : Evergreen.V73.Group.EventId -> Evergreen.V74.Group.EventId
migrate_Group_EventId old =
    case old of
        Evergreen.V73.Group.EventId p0 ->
            Evergreen.V74.Group.EventId p0


migrate_Group_Group : Evergreen.V73.Group.Group -> Evergreen.V74.Group.Group
migrate_Group_Group old =
    case old of
        Evergreen.V73.Group.Group p0 ->
            Evergreen.V74.Group.Group
                { ownerId = p0.ownerId |> migrate_Id_Id
                , name = p0.name |> migrate_GroupName_GroupName
                , description = p0.description |> migrate_Description_Description
                , events = p0.events |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Group_EventId migrate_Event_Event) |> SeqDict.fromList
                , visibility = p0.visibility |> migrate_Group_GroupVisibility
                , eventCounter = p0.eventCounter
                , createdAt = p0.createdAt
                , pendingReview = p0.pendingReview
                }


migrate_Group_GroupVisibility : Evergreen.V73.Group.GroupVisibility -> Evergreen.V74.Group.GroupVisibility
migrate_Group_GroupVisibility old =
    case old of
        Evergreen.V73.Group.UnlistedGroup ->
            Evergreen.V74.Group.UnlistedGroup

        Evergreen.V73.Group.PublicGroup ->
            Evergreen.V74.Group.PublicGroup


migrate_Group_JoinEventError : Evergreen.V73.Group.JoinEventError -> Evergreen.V74.Group.JoinEventError
migrate_Group_JoinEventError old =
    case old of
        Evergreen.V73.Group.NoSpotsLeftInEvent ->
            Evergreen.V74.Group.NoSpotsLeftInEvent

        Evergreen.V73.Group.EventNotFound ->
            Evergreen.V74.Group.EventNotFound


migrate_Id_Id : Evergreen.V73.Id.Id a_old -> Evergreen.V74.Id.Id a_new
migrate_Id_Id old =
    case old of
        Evergreen.V73.Id.Id p0 ->
            Evergreen.V74.Id.Id p0


migrate_Id_SessionIdFirst4Chars : Evergreen.V73.Id.SessionIdFirst4Chars -> Evergreen.V74.Id.SessionIdFirst4Chars
migrate_Id_SessionIdFirst4Chars old =
    case old of
        Evergreen.V73.Id.SessionIdFirst4Chars p0 ->
            Evergreen.V74.Id.SessionIdFirst4Chars p0


migrate_Link_Link : Evergreen.V73.Link.Link -> Evergreen.V74.Link.Link
migrate_Link_Link old =
    case old of
        Evergreen.V73.Link.Link p0 ->
            Evergreen.V74.Link.Link p0


migrate_List_Nonempty_Nonempty : (a_old -> a_new) -> List.Nonempty.Nonempty a_old -> List.Nonempty.Nonempty a_new
migrate_List_Nonempty_Nonempty migrate_a old =
    old |> List.Nonempty.map migrate_a


migrate_MaxAttendees_MaxAttendees : Evergreen.V73.MaxAttendees.MaxAttendees -> Evergreen.V74.MaxAttendees.MaxAttendees
migrate_MaxAttendees_MaxAttendees old =
    case old of
        Evergreen.V73.MaxAttendees.NoLimit ->
            Evergreen.V74.MaxAttendees.NoLimit

        Evergreen.V73.MaxAttendees.MaxAttendees p0 ->
            Evergreen.V74.MaxAttendees.MaxAttendees p0


migrate_Name_Name : Evergreen.V73.Name.Name -> Evergreen.V74.Name.Name
migrate_Name_Name old =
    case old of
        Evergreen.V73.Name.Name p0 ->
            Evergreen.V74.Name.Name p0


migrate_ProfileImage_ProfileImage : Evergreen.V73.ProfileImage.ProfileImage -> Evergreen.V74.ProfileImage.ProfileImage
migrate_ProfileImage_ProfileImage old =
    case old of
        Evergreen.V73.ProfileImage.DefaultImage ->
            Evergreen.V74.ProfileImage.DefaultImage

        Evergreen.V73.ProfileImage.CustomImage p0 ->
            Evergreen.V74.ProfileImage.CustomImage p0


migrate_ProfilePage_DragPart : Evergreen.V73.ProfilePage.DragPart -> Evergreen.V74.ProfilePage.DragPart
migrate_ProfilePage_DragPart old =
    case old of
        Evergreen.V73.ProfilePage.TopLeft ->
            Evergreen.V74.ProfilePage.TopLeft

        Evergreen.V73.ProfilePage.TopRight ->
            Evergreen.V74.ProfilePage.TopRight

        Evergreen.V73.ProfilePage.BottomLeft ->
            Evergreen.V74.ProfilePage.BottomLeft

        Evergreen.V73.ProfilePage.BottomRight ->
            Evergreen.V74.ProfilePage.BottomRight

        Evergreen.V73.ProfilePage.Center ->
            Evergreen.V74.ProfilePage.Center


migrate_ProfilePage_DragState : Evergreen.V73.ProfilePage.DragState -> Evergreen.V74.ProfilePage.DragState
migrate_ProfilePage_DragState old =
    { startX = old.startX
    , startY = old.startY
    , dragPart = old.dragPart |> migrate_ProfilePage_DragPart
    , currentX = old.currentX
    , currentY = old.currentY
    }


migrate_ProfilePage_Editable : (a_old -> a_new) -> Evergreen.V73.ProfilePage.Editable a_old -> Evergreen.V74.ProfilePage.Editable a_new
migrate_ProfilePage_Editable migrate_a old =
    case old of
        Evergreen.V73.ProfilePage.Unchanged ->
            Evergreen.V74.ProfilePage.Unchanged

        Evergreen.V73.ProfilePage.Editing p0 ->
            Evergreen.V74.ProfilePage.Editing (p0 |> migrate_a)


migrate_ProfilePage_Form : Evergreen.V73.ProfilePage.Form -> Evergreen.V74.ProfilePage.Form
migrate_ProfilePage_Form old =
    { name = old.name |> migrate_ProfilePage_Editable identity
    , description = old.description |> migrate_ProfilePage_Editable identity
    , emailAddress = old.emailAddress |> migrate_ProfilePage_Editable identity
    }


migrate_ProfilePage_ImageEdit : Evergreen.V73.ProfilePage.ImageEdit -> Evergreen.V74.ProfilePage.ImageEdit
migrate_ProfilePage_ImageEdit old =
    { x = old.x
    , y = old.y
    , size = old.size
    , imageUrl = old.imageUrl
    , dragState = old.dragState |> Maybe.map migrate_ProfilePage_DragState
    , imageSize = old.imageSize
    }


migrate_ProfilePage_Model : Evergreen.V73.ProfilePage.Model -> Evergreen.V74.ProfilePage.Model
migrate_ProfilePage_Model old =
    { form = old.form |> migrate_ProfilePage_Form
    , changeCounter = old.changeCounter
    , profileImage = old.profileImage |> migrate_ProfilePage_Editable (Maybe.map migrate_ProfilePage_ImageEdit)
    , profileImageSize = old.profileImageSize
    , pressedDeleteAccount = old.pressedDeleteAccount
    }


migrate_ProfilePage_ToBackend : Evergreen.V73.ProfilePage.ToBackend -> Evergreen.V74.ProfilePage.ToBackend
migrate_ProfilePage_ToBackend old =
    case old of
        Evergreen.V73.ProfilePage.ChangeNameRequest p0 ->
            Evergreen.V74.ProfilePage.ChangeNameRequest (p0 |> migrate_Untrusted_Untrusted migrate_Name_Name)

        Evergreen.V73.ProfilePage.ChangeDescriptionRequest p0 ->
            Evergreen.V74.ProfilePage.ChangeDescriptionRequest (p0 |> migrate_Untrusted_Untrusted migrate_Description_Description)

        Evergreen.V73.ProfilePage.ChangeEmailAddressRequest p0 ->
            Evergreen.V74.ProfilePage.ChangeEmailAddressRequest (p0 |> migrate_Untrusted_Untrusted migrate_EmailAddress_EmailAddress)

        Evergreen.V73.ProfilePage.SendDeleteUserEmailRequest ->
            Evergreen.V74.ProfilePage.SendDeleteUserEmailRequest

        Evergreen.V73.ProfilePage.ChangeProfileImageRequest p0 ->
            Evergreen.V74.ProfilePage.ChangeProfileImageRequest (p0 |> migrate_Untrusted_Untrusted migrate_ProfileImage_ProfileImage)


migrate_Route_Route : Evergreen.V73.Route.Route -> Evergreen.V74.Route.Route
migrate_Route_Route old =
    case old of
        Evergreen.V73.Route.HomepageRoute ->
            Evergreen.V74.Route.HomepageRoute

        Evergreen.V73.Route.GroupRoute p0 p1 ->
            Evergreen.V74.Route.GroupRoute (p0 |> migrate_Id_Id)
                (p1 |> migrate_GroupName_GroupName)

        Evergreen.V73.Route.AdminRoute ->
            Evergreen.V74.Route.AdminRoute

        Evergreen.V73.Route.CreateGroupRoute ->
            Evergreen.V74.Route.CreateGroupRoute

        Evergreen.V73.Route.SearchGroupsRoute p0 ->
            Evergreen.V74.Route.SearchGroupsRoute p0

        Evergreen.V73.Route.MyGroupsRoute ->
            Evergreen.V74.Route.MyGroupsRoute

        Evergreen.V73.Route.MyProfileRoute ->
            Evergreen.V74.Route.MyProfileRoute

        Evergreen.V73.Route.UserRoute p0 p1 ->
            Evergreen.V74.Route.UserRoute (p0 |> migrate_Id_Id) (p1 |> migrate_Name_Name)

        Evergreen.V73.Route.PrivacyRoute ->
            Evergreen.V74.Route.PrivacyRoute

        Evergreen.V73.Route.TermsOfServiceRoute ->
            Evergreen.V74.Route.TermsOfServiceRoute

        Evergreen.V73.Route.CodeOfConductRoute ->
            Evergreen.V74.Route.CodeOfConductRoute

        Evergreen.V73.Route.FrequentQuestionsRoute ->
            Evergreen.V74.Route.FrequentQuestionsRoute


migrate_Route_Token : Evergreen.V73.Route.Token -> Evergreen.V74.Route.Token
migrate_Route_Token old =
    case old of
        Evergreen.V73.Route.NoToken ->
            Evergreen.V74.Route.NoToken

        Evergreen.V73.Route.LoginToken p0 p1 ->
            Evergreen.V74.Route.LoginToken (p0 |> migrate_Id_Id)
                (p1 |> Maybe.map (Tuple.mapBoth migrate_Id_Id migrate_Group_EventId))

        Evergreen.V73.Route.DeleteUserToken p0 ->
            Evergreen.V74.Route.DeleteUserToken (p0 |> migrate_Id_Id)


migrate_Types_AdminCache : Evergreen.V73.Types.AdminCache -> Evergreen.V74.Types.AdminCache
migrate_Types_AdminCache old =
    case old of
        Evergreen.V73.Types.AdminCacheNotRequested ->
            Evergreen.V74.Types.AdminCacheNotRequested

        Evergreen.V73.Types.AdminCached p0 ->
            Evergreen.V74.Types.AdminCached (p0 |> migrate_Types_AdminModel)

        Evergreen.V73.Types.AdminCachePending ->
            Evergreen.V74.Types.AdminCachePending


migrate_Types_AdminModel : Evergreen.V73.Types.AdminModel -> Evergreen.V74.Types.AdminModel
migrate_Types_AdminModel old =
    { cachedEmailAddress = old.cachedEmailAddress |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_EmailAddress_EmailAddress) |> SeqDict.fromList
    , logs = old.logs |> Array.map migrate_Types_Log
    , lastLogCheck = old.lastLogCheck
    }


migrate_Types_ColorTheme : Evergreen.V73.Types.ColorTheme -> Evergreen.V74.Types.ColorTheme
migrate_Types_ColorTheme old =
    case old of
        Evergreen.V73.Types.LightTheme ->
            Evergreen.V74.Types.LightTheme

        Evergreen.V73.Types.DarkTheme ->
            Evergreen.V74.Types.DarkTheme


migrate_Types_FrontendModel : Evergreen.V73.Types.FrontendModel -> Evergreen.V74.Types.FrontendModel
migrate_Types_FrontendModel old =
    case old of
        Evergreen.V73.Types.Loading p0 ->
            Evergreen.V74.Types.Loading (p0 |> migrate_Types_LoadingFrontend)

        Evergreen.V73.Types.Loaded p0 ->
            Evergreen.V74.Types.Loaded (p0 |> migrate_Types_LoadedFrontend)


migrate_Types_Language : Evergreen.V73.Types.Language -> Evergreen.V74.Types.Language
migrate_Types_Language old =
    case old of
        Evergreen.V73.Types.English ->
            Evergreen.V74.Types.English

        Evergreen.V73.Types.French ->
            Evergreen.V74.Types.French

        Evergreen.V73.Types.Spanish ->
            Evergreen.V74.Types.Spanish

        Evergreen.V73.Types.Thai ->
            Evergreen.V74.Types.Thai


migrate_Types_LoadedFrontend : Evergreen.V73.Types.LoadedFrontend -> Evergreen.V74.Types.LoadedFrontend
migrate_Types_LoadedFrontend old =
    { navigationKey = old.navigationKey
    , loginStatus = old.loginStatus |> migrate_Types_LoginStatus
    , route = old.route |> migrate_Route_Route
    , cachedGroups = old.cachedGroups |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id (migrate_Cache_Cache migrate_Group_Group)) |> SeqDict.fromList
    , cachedUsers = old.cachedUsers |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id (migrate_Cache_Cache migrate_FrontendUser_FrontendUser)) |> SeqDict.fromList
    , time = old.time
    , timezone = old.timezone |> Ok
    , lastConnectionCheck = old.lastConnectionCheck
    , loginForm = old.loginForm |> migrate_Types_LoginForm
    , logs = old.logs |> Maybe.map (Array.map migrate_Types_Log)
    , hasLoginTokenError = old.hasLoginTokenError
    , groupForm = old.groupForm |> migrate_CreateGroupPage_Model
    , groupCreated = old.groupCreated
    , accountDeletedResult = old.accountDeletedResult
    , searchText = old.searchText
    , searchList = old.searchList |> List.map migrate_Id_Id
    , windowWidth = old.windowWidth
    , windowHeight = old.windowHeight
    , groupPage = old.groupPage |> SeqDict.toList |> List.map (Tuple.mapBoth migrate_Id_Id migrate_GroupPage_Model) |> SeqDict.fromList
    , loadedUserConfig = old.loadedUserConfig |> migrate_Types_LoadedUserConfig
    , miniLanguageSelectorOpened = old.miniLanguageSelectorOpened
    }


migrate_Types_LoadedUserConfig : Evergreen.V73.Types.LoadedUserConfig -> Evergreen.V74.Types.LoadedUserConfig
migrate_Types_LoadedUserConfig old =
    { theme = old.theme |> migrate_Types_ColorTheme
    , language = old.language |> migrate_Types_Language
    }


migrate_Types_LoadingFrontend : Evergreen.V73.Types.LoadingFrontend -> Evergreen.V74.Types.LoadingFrontend
migrate_Types_LoadingFrontend old =
    { navigationKey = old.navigationKey
    , route = old.route |> migrate_Route_Route
    , routeToken = old.routeToken |> migrate_Route_Token
    , windowSize = old.windowSize
    , time = old.time
    , timezone = old.timezone |> Maybe.map Ok
    , theme = old.theme |> migrate_Types_ColorTheme
    }


migrate_Types_Log : Evergreen.V73.Types.Log -> Evergreen.V74.Types.Log
migrate_Types_Log old =
    case old of
        Evergreen.V73.Types.LogUntrustedCheckFailed p0 p1 p2 ->
            Evergreen.V74.Types.LogUntrustedCheckFailed p0
                (p1 |> migrate_Types_ToBackend)
                (p2 |> migrate_Id_SessionIdFirst4Chars)

        Evergreen.V73.Types.LogLoginEmail p0 p1 p2 ->
            Evergreen.V74.Types.LogLoginEmail p0 p1 (p2 |> migrate_EmailAddress_EmailAddress)

        Evergreen.V73.Types.LogDeleteAccountEmail p0 p1 p2 ->
            Evergreen.V74.Types.LogDeleteAccountEmail p0 p1 (p2 |> migrate_Id_Id)

        Evergreen.V73.Types.LogEventReminderEmail p0 p1 p2 p3 p4 ->
            Evergreen.V74.Types.LogEventReminderEmail p0
                p1
                (p2 |> migrate_Id_Id)
                (p3 |> migrate_Id_Id)
                (p4 |> migrate_Group_EventId)

        Evergreen.V73.Types.LogNewEventNotificationEmail p0 p1 p2 p3 ->
            Evergreen.V74.Types.LogNewEventNotificationEmail p0
                p1
                (p2 |> migrate_Id_Id)
                (p3 |> migrate_Id_Id)

        Evergreen.V73.Types.LogLoginTokenEmailRequestRateLimited p0 p1 p2 ->
            Evergreen.V74.Types.LogLoginTokenEmailRequestRateLimited p0
                (p1 |> migrate_EmailAddress_EmailAddress)
                (p2 |> migrate_Id_SessionIdFirst4Chars)

        Evergreen.V73.Types.LogDeleteAccountEmailRequestRateLimited p0 p1 p2 ->
            Evergreen.V74.Types.LogDeleteAccountEmailRequestRateLimited p0
                (p1 |> migrate_Id_Id)
                (p2 |> migrate_Id_SessionIdFirst4Chars)


migrate_Types_LoggedIn_ : Evergreen.V73.Types.LoggedIn_ -> Evergreen.V74.Types.LoggedIn_
migrate_Types_LoggedIn_ old =
    { userId = old.userId |> migrate_Id_Id
    , emailAddress = old.emailAddress |> migrate_EmailAddress_EmailAddress
    , profileForm = old.profileForm |> migrate_ProfilePage_Model
    , myGroups = old.myGroups |> Maybe.map (SeqSet.map migrate_Id_Id)
    , subscribedGroups = old.subscribedGroups |> SeqSet.map migrate_Id_Id
    , adminState = old.adminState |> migrate_Types_AdminCache
    , adminStatus = old.adminStatus |> migrate_AdminStatus_AdminStatus
    }


migrate_Types_LoginForm : Evergreen.V73.Types.LoginForm -> Evergreen.V74.Types.LoginForm
migrate_Types_LoginForm old =
    { email = old.email
    , pressedSubmitEmail = old.pressedSubmitEmail
    , emailSent = old.emailSent |> Maybe.map migrate_EmailAddress_EmailAddress
    }


migrate_Types_LoginStatus : Evergreen.V73.Types.LoginStatus -> Evergreen.V74.Types.LoginStatus
migrate_Types_LoginStatus old =
    case old of
        Evergreen.V73.Types.LoginStatusPending ->
            Evergreen.V74.Types.LoginStatusPending

        Evergreen.V73.Types.LoggedIn p0 ->
            Evergreen.V74.Types.LoggedIn (p0 |> migrate_Types_LoggedIn_)

        Evergreen.V73.Types.NotLoggedIn p0 ->
            Evergreen.V74.Types.NotLoggedIn
                { showLogin = p0.showLogin
                , joiningEvent = p0.joiningEvent |> Maybe.map (Tuple.mapBoth migrate_Id_Id migrate_Group_EventId)
                }


migrate_Types_ToBackend : Evergreen.V73.Types.ToBackend -> Evergreen.V74.Types.ToBackend
migrate_Types_ToBackend old =
    case old of
        Evergreen.V73.Types.GetGroupRequest p0 ->
            Evergreen.V74.Types.GetGroupRequest (p0 |> migrate_Id_Id)

        Evergreen.V73.Types.GetUserRequest p0 ->
            Evergreen.V74.Types.GetUserRequest (p0 |> migrate_List_Nonempty_Nonempty migrate_Id_Id)

        Evergreen.V73.Types.CheckLoginRequest ->
            Evergreen.V74.Types.CheckLoginRequest

        Evergreen.V73.Types.LoginWithTokenRequest p0 p1 ->
            Evergreen.V74.Types.LoginWithTokenRequest (p0 |> migrate_Id_Id)
                (p1 |> Maybe.map (Tuple.mapBoth migrate_Id_Id migrate_Group_EventId))

        Evergreen.V73.Types.GetLoginTokenRequest p0 p1 p2 ->
            Evergreen.V74.Types.GetLoginTokenRequest (p0 |> migrate_Route_Route)
                (p1 |> migrate_Untrusted_Untrusted migrate_EmailAddress_EmailAddress)
                (p2 |> Maybe.map (Tuple.mapBoth migrate_Id_Id migrate_Group_EventId))

        Evergreen.V73.Types.GetAdminDataRequest ->
            Evergreen.V74.Types.GetAdminDataRequest

        Evergreen.V73.Types.LogoutRequest ->
            Evergreen.V74.Types.LogoutRequest

        Evergreen.V73.Types.CreateGroupRequest p0 p1 p2 ->
            Evergreen.V74.Types.CreateGroupRequest (p0 |> migrate_Untrusted_Untrusted migrate_GroupName_GroupName)
                (p1 |> migrate_Untrusted_Untrusted migrate_Description_Description)
                (p2 |> migrate_Group_GroupVisibility)

        Evergreen.V73.Types.DeleteUserRequest p0 ->
            Evergreen.V74.Types.DeleteUserRequest (p0 |> migrate_Id_Id)

        Evergreen.V73.Types.GetMyGroupsRequest ->
            Evergreen.V74.Types.GetMyGroupsRequest

        Evergreen.V73.Types.SearchGroupsRequest p0 ->
            Evergreen.V74.Types.SearchGroupsRequest p0

        Evergreen.V73.Types.GroupRequest p0 p1 ->
            Evergreen.V74.Types.GroupRequest (p0 |> migrate_Id_Id)
                (p1 |> migrate_GroupPage_ToBackend)

        Evergreen.V73.Types.ProfileFormRequest p0 ->
            Evergreen.V74.Types.ProfileFormRequest (p0 |> migrate_ProfilePage_ToBackend)


migrate_Untrusted_Untrusted : (a_old -> a_new) -> Evergreen.V73.Untrusted.Untrusted a_old -> Evergreen.V74.Untrusted.Untrusted a_new
migrate_Untrusted_Untrusted migrate_a old =
    case old of
        Evergreen.V73.Untrusted.Untrusted p0 ->
            Evergreen.V74.Untrusted.Untrusted (p0 |> migrate_a)
